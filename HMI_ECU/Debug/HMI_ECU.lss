
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00003d24  00003db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800138  00800138  00003e90  2**0
                  ALLOC
  3 .stab         00003858  00000000  00000000  00003e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001de9  00000000  00000000  000076e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000094d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009611  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d064  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d451  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <main>
      8a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <TIMER1_Init>:

/* Global variable to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

//Initialize Timer1
void TIMER1_Init(const Timer1_ConfigType *Config_Ptr) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <TIMER1_Init+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
//	Normal comp mode : clear COM1A0 , COM1A1 , COM1B0 , COM1B1
//	Normal mode : Clear WGM10 & WGM11 & WGM12 & WGM13
//	Compare mode: Clear WGM10 & WGM11 & WGM13
//`					& set WGM12
//we will make WGM10 & WGM11 = 0
	TCCR1A |= (1 << FOC1A) | (1<<FOC1B);
    11d0:	af e4       	ldi	r26, 0x4F	; 79
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ef e4       	ldi	r30, 0x4F	; 79
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8c 60       	ori	r24, 0x0C	; 12
    11dc:	8c 93       	st	X, r24
//	TCCR1B:
//	Normal mode : Clear WGM10 & WGM11 & WGM12 & WGM13
//	Compare mode: Clear WGM10 & WGM11 & WGM13
//`					& set WGM12
//	PRESCALAR = change CS10 , CS12 & CS11 "First three bits"
	TCCR1B |= (Config_Ptr -> prescaler) | ((Config_Ptr -> mode) << WGM12);
    11de:	ae e4       	ldi	r26, 0x4E	; 78
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ee e4       	ldi	r30, 0x4E	; 78
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	28 2f       	mov	r18, r24
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	84 81       	ldd	r24, Z+4	; 0x04
    11f0:	38 2f       	mov	r19, r24
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	85 81       	ldd	r24, Z+5	; 0x05
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	83 2b       	or	r24, r19
    120a:	82 2b       	or	r24, r18
    120c:	8c 93       	st	X, r24

	//if normal mode
	if(Config_Ptr -> mode == NormalMode){
    120e:	e9 81       	ldd	r30, Y+1	; 0x01
    1210:	fa 81       	ldd	r31, Y+2	; 0x02
    1212:	85 81       	ldd	r24, Z+5	; 0x05
    1214:	88 23       	and	r24, r24
    1216:	81 f4       	brne	.+32     	; 0x1238 <TIMER1_Init+0x76>
		//initial value
		TCNT1 = Config_Ptr -> initial_value;
    1218:	ac e4       	ldi	r26, 0x4C	; 76
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
		//Overflow Interrupt Enable
		TIMSK |= (1 << TOIE1);
    122a:	a9 e5       	ldi	r26, 0x59	; 89
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e9 e5       	ldi	r30, 0x59	; 89
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	8c 93       	st	X, r24
	}

	//if compare mode
	if(Config_Ptr -> mode == CompareMode){
    1238:	e9 81       	ldd	r30, Y+1	; 0x01
    123a:	fa 81       	ldd	r31, Y+2	; 0x02
    123c:	85 81       	ldd	r24, Z+5	; 0x05
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	81 f4       	brne	.+32     	; 0x1262 <TIMER1_Init+0xa0>
		//COMPARE VALUE
		OCR1A = Config_Ptr -> compare_value;
    1242:	aa e4       	ldi	r26, 0x4A	; 74
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	11 96       	adiw	r26, 0x01	; 1
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
		//Output Compare A Match Interrupt Enable
		TIMSK |= (1 << OCIE1A);
    1254:	a9 e5       	ldi	r26, 0x59	; 89
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e9 e5       	ldi	r30, 0x59	; 89
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 61       	ori	r24, 0x10	; 16
    1260:	8c 93       	st	X, r24
	}
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <Timer1_deInit>:


/*
 * Description: Function to disable the Timer1
 */
void Timer1_deInit(void) {
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1274:	ef e4       	ldi	r30, 0x4F	; 79
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	10 82       	st	Z, r1
	TCCR1B = 0;
    127a:	ee e4       	ldi	r30, 0x4E	; 78
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1
	TCNT1 = 0;
    1280:	ec e4       	ldi	r30, 0x4C	; 76
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	11 82       	std	Z+1, r1	; 0x01
    1286:	10 82       	st	Z, r1
	OCR1A = 0;
    1288:	ea e4       	ldi	r30, 0x4A	; 74
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	11 82       	std	Z+1, r1	; 0x01
    128e:	10 82       	st	Z, r1
	TIMSK = 0;
    1290:	e9 e5       	ldi	r30, 0x59	; 89
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	10 82       	st	Z, r1
}
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <Timer1_setCallBack>:

//Function to set CallBack function
void Timer1_setCallBack(void (*a_ptr)(void)) {
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <Timer1_setCallBack+0x6>
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	90 93 39 01 	sts	0x0139, r25
    12b2:	80 93 38 01 	sts	0x0138, r24
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	2f 93       	push	r18
    12cc:	3f 93       	push	r19
    12ce:	4f 93       	push	r20
    12d0:	5f 93       	push	r21
    12d2:	6f 93       	push	r22
    12d4:	7f 93       	push	r23
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	af 93       	push	r26
    12dc:	bf 93       	push	r27
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    12ea:	80 91 38 01 	lds	r24, 0x0138
    12ee:	90 91 39 01 	lds	r25, 0x0139
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	29 f0       	breq	.+10     	; 0x1300 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application
		 * after compare is reached */
		(*g_callBackPtr)();
    12f6:	e0 91 38 01 	lds	r30, 0x0138
    12fa:	f0 91 39 01 	lds	r31, 0x0139
    12fe:	09 95       	icall
	}
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1350:	80 91 38 01 	lds	r24, 0x0138
    1354:	90 91 39 01 	lds	r25, 0x0139
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	29 f0       	breq	.+10     	; 0x1366 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application
		 * after overflow  */
		(*g_callBackPtr)();
    135c:	e0 91 38 01 	lds	r30, 0x0138
    1360:	f0 91 39 01 	lds	r31, 0x0139
    1364:	09 95       	icall
	}
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <UART_init+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <UART_init+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    139c:	1a 82       	std	Y+2, r1	; 0x02
    139e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    13a0:	eb e2       	ldi	r30, 0x2B	; 43
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (8 , 7 , 6 , 5)-bits data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    13a8:	ea e2       	ldi	r30, 0x2A	; 42
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	88 e1       	ldi	r24, 0x18	; 24
    13ae:	80 83       	st	Z, r24
	 * UCSZ1:0 = 01 For (6)-bits data mode
	 * UCSZ1:0 = 00 For (5)-bits data mode
	 *
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) | ((Config_Ptr->bit_data) << UCSZ0);
    13b0:	a0 e4       	ldi	r26, 0x40	; 64
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e0 e4       	ldi	r30, 0x40	; 64
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	eb 81       	ldd	r30, Y+3	; 0x03
    13be:	fc 81       	ldd	r31, Y+4	; 0x04
    13c0:	80 81       	ld	r24, Z
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	80 68       	ori	r24, 0x80	; 128
    13cc:	82 2b       	or	r24, r18
    13ce:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->parity) << UPM0);
    13d0:	a0 e4       	ldi	r26, 0x40	; 64
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e0 e4       	ldi	r30, 0x40	; 64
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	eb 81       	ldd	r30, Y+3	; 0x03
    13de:	fc 81       	ldd	r31, Y+4	; 0x04
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	82 95       	swap	r24
    13e8:	92 95       	swap	r25
    13ea:	90 7f       	andi	r25, 0xF0	; 240
    13ec:	98 27       	eor	r25, r24
    13ee:	80 7f       	andi	r24, 0xF0	; 240
    13f0:	98 27       	eor	r25, r24
    13f2:	82 2b       	or	r24, r18
    13f4:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->stop_bit) << USBS);
    13f6:	a0 e4       	ldi	r26, 0x40	; 64
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e0 e4       	ldi	r30, 0x40	; 64
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	28 2f       	mov	r18, r24
    1402:	eb 81       	ldd	r30, Y+3	; 0x03
    1404:	fc 81       	ldd	r31, Y+4	; 0x04
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	82 2b       	or	r24, r18
    141a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	83 81       	ldd	r24, Z+3	; 0x03
    1422:	94 81       	ldd	r25, Z+4	; 0x04
    1424:	a5 81       	ldd	r26, Z+5	; 0x05
    1426:	b6 81       	ldd	r27, Z+6	; 0x06
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	aa 1f       	adc	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	aa 1f       	adc	r26, r26
    143e:	bb 1f       	adc	r27, r27
    1440:	9c 01       	movw	r18, r24
    1442:	ad 01       	movw	r20, r26
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	92 e1       	ldi	r25, 0x12	; 18
    1448:	aa e7       	ldi	r26, 0x7A	; 122
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	bc 01       	movw	r22, r24
    144e:	cd 01       	movw	r24, r26
    1450:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__udivmodsi4>
    1454:	da 01       	movw	r26, r20
    1456:	c9 01       	movw	r24, r18
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    145e:	e0 e4       	ldi	r30, 0x40	; 64
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	89 2f       	mov	r24, r25
    1468:	99 27       	eor	r25, r25
    146a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    146c:	e9 e2       	ldi	r30, 0x29	; 41
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	80 83       	st	Z, r24
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	0f 92       	push	r0
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    148e:	eb e2       	ldi	r30, 0x2B	; 43
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	80 72       	andi	r24, 0x20	; 32
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	b9 f3       	breq	.-18     	; 0x148e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    14a0:	ec e2       	ldi	r30, 0x2C	; 44
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    14b8:	eb e2       	ldi	r30, 0x2B	; 43
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 23       	and	r24, r24
    14c0:	dc f7       	brge	.-10     	; 0x14b8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    14c2:	ec e2       	ldi	r30, 0x2C	; 44
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <UART_sendString+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	80 81       	ld	r24, Z
    14f4:	0e 94 41 0a 	call	0x1482	; 0x1482 <UART_sendByte>
		i++;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	fc 01       	movw	r30, r24
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	80 81       	ld	r24, Z
    1510:	88 23       	and	r24, r24
    1512:	39 f7       	brne	.-50     	; 0x14e2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <UART_receiveString+0xa>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1534:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	8c 01       	movw	r16, r24
    1542:	02 0f       	add	r16, r18
    1544:	13 1f       	adc	r17, r19
    1546:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    154a:	f8 01       	movw	r30, r16
    154c:	80 83       	st	Z, r24
    154e:	0f c0       	rjmp	.+30     	; 0x156e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	8c 01       	movw	r16, r24
    1562:	02 0f       	add	r16, r18
    1564:	13 1f       	adc	r17, r19
    1566:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    156a:	f8 01       	movw	r30, r16
    156c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	80 81       	ld	r24, Z
    1580:	83 32       	cpi	r24, 0x23	; 35
    1582:	31 f7       	brne	.-52     	; 0x1550 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	fc 01       	movw	r30, r24
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	10 82       	st	Z, r1
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	60 97       	sbiw	r28, 0x10	; 16
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	//inside init
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	64 e0       	ldi	r22, 0x04	; 4
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	65 e0       	ldi	r22, 0x05	; 5
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	66 e0       	ldi	r22, 0x06	; 6
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	67 e0       	ldi	r22, 0x07	; 7
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	64 e0       	ldi	r22, 0x04	; 4
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	65 e0       	ldi	r22, 0x05	; 5
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	// init end
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    160a:	1f 86       	std	Y+15, r1	; 0x0f
    160c:	b4 c0       	rjmp	.+360    	; 0x1776 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	98 2f       	mov	r25, r24
    1612:	9c 5f       	subi	r25, 0xFC	; 252
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	69 2f       	mov	r22, r25
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    161e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1620:	98 2f       	mov	r25, r24
    1622:	9c 5f       	subi	r25, 0xFC	; 252
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	69 2f       	mov	r22, r25
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    162e:	18 8a       	std	Y+16, r1	; 0x10
    1630:	22 c0       	rjmp	.+68     	; 0x1676 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1632:	88 89       	ldd	r24, Y+16	; 0x10
    1634:	98 2f       	mov	r25, r24
    1636:	9e 5f       	subi	r25, 0xFE	; 254
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	69 2f       	mov	r22, r25
    163c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1640:	88 23       	and	r24, r24
    1642:	b1 f4       	brne	.+44     	; 0x1670 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1644:	8f 85       	ldd	r24, Y+15	; 0x0f
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	98 2f       	mov	r25, r24
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	89 0f       	add	r24, r25
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    165e:	60 96       	adiw	r28, 0x10	; 16
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1670:	88 89       	ldd	r24, Y+16	; 0x10
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	88 8b       	std	Y+16, r24	; 0x10
    1676:	88 89       	ldd	r24, Y+16	; 0x10
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	d8 f2       	brcs	.-74     	; 0x1632 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    167c:	8f 85       	ldd	r24, Y+15	; 0x0f
    167e:	98 2f       	mov	r25, r24
    1680:	9c 5f       	subi	r25, 0xFC	; 252
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	69 2f       	mov	r22, r25
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a0 ea       	ldi	r26, 0xA0	; 160
    1692:	b0 e4       	ldi	r27, 0x40	; 64
    1694:	8b 87       	std	Y+11, r24	; 0x0b
    1696:	9c 87       	std	Y+12, r25	; 0x0c
    1698:	ad 87       	std	Y+13, r26	; 0x0d
    169a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4a ef       	ldi	r20, 0xFA	; 250
    16aa:	54 e4       	ldi	r21, 0x44	; 68
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8f 83       	std	Y+7, r24	; 0x07
    16b6:	98 87       	std	Y+8, r25	; 0x08
    16b8:	a9 87       	std	Y+9, r26	; 0x09
    16ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e8       	ldi	r20, 0x80	; 128
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	2c f4       	brge	.+10     	; 0x16de <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	3f c0       	rjmp	.+126    	; 0x175c <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f e7       	ldi	r20, 0x7F	; 127
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f2:	18 16       	cp	r1, r24
    16f4:	4c f5       	brge	.+82     	; 0x1748 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	bc 01       	movw	r22, r24
    1710:	cd 01       	movw	r24, r26
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	0f c0       	rjmp	.+30     	; 0x173e <KEYPAD_getPressedKey+0x198>
    1720:	88 ec       	ldi	r24, 0xC8	; 200
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 83       	std	Y+4, r25	; 0x04
    1726:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <KEYPAD_getPressedKey+0x186>
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	69 f7       	brne	.-38     	; 0x1720 <KEYPAD_getPressedKey+0x17a>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <KEYPAD_getPressedKey+0x1c2>
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	// init end
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1770:	8f 85       	ldd	r24, Y+15	; 0x0f
    1772:	8f 5f       	subi	r24, 0xFF	; 255
    1774:	8f 87       	std	Y+15, r24	; 0x0f
    1776:	8f 85       	ldd	r24, Y+15	; 0x0f
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	08 f4       	brcc	.+2      	; 0x177e <KEYPAD_getPressedKey+0x1d8>
    177c:	48 cf       	rjmp	.-368    	; 0x160e <KEYPAD_getPressedKey+0x68>
    177e:	45 cf       	rjmp	.-374    	; 0x160a <KEYPAD_getPressedKey+0x64>

00001780 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    178e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3c 83       	std	Y+4, r19	; 0x04
    1798:	2b 83       	std	Y+3, r18	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    17a4:	70 c0       	rjmp	.+224    	; 0x1886 <KEYPAD_4x4_adjustKeyNumber+0x106>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	29 30       	cpi	r18, 0x09	; 9
    17ac:	31 05       	cpc	r19, r1
    17ae:	5c f5       	brge	.+86     	; 0x1806 <KEYPAD_4x4_adjustKeyNumber+0x86>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    17ba:	59 c0       	rjmp	.+178    	; 0x186e <KEYPAD_4x4_adjustKeyNumber+0xee>
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	25 30       	cpi	r18, 0x05	; 5
    17c2:	31 05       	cpc	r19, r1
    17c4:	9c f4       	brge	.+38     	; 0x17ec <KEYPAD_4x4_adjustKeyNumber+0x6c>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    17d0:	48 c0       	rjmp	.+144    	; 0x1862 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	23 30       	cpi	r18, 0x03	; 3
    17d8:	31 05       	cpc	r19, r1
    17da:	0c f0       	brlt	.+2      	; 0x17de <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17dc:	45 c0       	rjmp	.+138    	; 0x1868 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x6a>
    17e8:	39 c0       	rjmp	.+114    	; 0x185c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    17ea:	67 c0       	rjmp	.+206    	; 0x18ba <KEYPAD_4x4_adjustKeyNumber+0x13a>
    17ec:	2b 81       	ldd	r18, Y+3	; 0x03
    17ee:	3c 81       	ldd	r19, Y+4	; 0x04
    17f0:	26 30       	cpi	r18, 0x06	; 6
    17f2:	31 05       	cpc	r19, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    17f6:	41 c0       	rjmp	.+130    	; 0x187a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	87 30       	cpi	r24, 0x07	; 7
    17fe:	91 05       	cpc	r25, r1
    1800:	0c f0       	brlt	.+2      	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1802:	3e c0       	rjmp	.+124    	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1804:	37 c0       	rjmp	.+110    	; 0x1874 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	3c 81       	ldd	r19, Y+4	; 0x04
    180a:	2c 30       	cpi	r18, 0x0C	; 12
    180c:	31 05       	cpc	r19, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1810:	46 c0       	rjmp	.+140    	; 0x189e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	8d 30       	cpi	r24, 0x0D	; 13
    1818:	91 05       	cpc	r25, r1
    181a:	5c f4       	brge	.+22     	; 0x1832 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	2a 30       	cpi	r18, 0x0A	; 10
    1822:	31 05       	cpc	r19, r1
    1824:	b1 f1       	breq	.+108    	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	8b 30       	cpi	r24, 0x0B	; 11
    182c:	91 05       	cpc	r25, r1
    182e:	a4 f5       	brge	.+104    	; 0x1898 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1830:	2d c0       	rjmp	.+90     	; 0x188c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	2e 30       	cpi	r18, 0x0E	; 14
    1838:	31 05       	cpc	r19, r1
    183a:	b9 f1       	breq	.+110    	; 0x18aa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	8e 30       	cpi	r24, 0x0E	; 14
    1842:	91 05       	cpc	r25, r1
    1844:	7c f1       	brlt	.+94     	; 0x18a4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	2f 30       	cpi	r18, 0x0F	; 15
    184c:	31 05       	cpc	r19, r1
    184e:	79 f1       	breq	.+94     	; 0x18ae <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	80 31       	cpi	r24, 0x10	; 16
    1856:	91 05       	cpc	r25, r1
    1858:	69 f1       	breq	.+90     	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    185a:	2f c0       	rjmp	.+94     	; 0x18ba <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    185c:	87 e0       	ldi	r24, 0x07	; 7
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	2e c0       	rjmp	.+92     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1862:	88 e0       	ldi	r24, 0x08	; 8
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	2b c0       	rjmp	.+86     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1868:	89 e0       	ldi	r24, 0x09	; 9
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	28 c0       	rjmp	.+80     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    186e:	85 e2       	ldi	r24, 0x25	; 37
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	25 c0       	rjmp	.+74     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	22 c0       	rjmp	.+68     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    187a:	85 e0       	ldi	r24, 0x05	; 5
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	1f c0       	rjmp	.+62     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1880:	86 e0       	ldi	r24, 0x06	; 6
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	1c c0       	rjmp	.+56     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1886:	8a e2       	ldi	r24, 0x2A	; 42
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	19 c0       	rjmp	.+50     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	16 c0       	rjmp	.+44     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	13 c0       	rjmp	.+38     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1898:	83 e0       	ldi	r24, 0x03	; 3
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	10 c0       	rjmp	.+32     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    189e:	8d e2       	ldi	r24, 0x2D	; 45
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	0d c0       	rjmp	.+26     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    18a4:	8d e0       	ldi	r24, 0x0D	; 13
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	0a c0       	rjmp	.+20     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    18aa:	19 82       	std	Y+1, r1	; 0x01
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    18ae:	8d e3       	ldi	r24, 0x3D	; 61
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    18b4:	8b e2       	ldi	r24, 0x2B	; 43
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
} 
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	2e 97       	sbiw	r28, 0x0e	; 14
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	62 e0       	ldi	r22, 0x02	; 2
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 ea       	ldi	r26, 0xA0	; 160
    18fc:	b1 e4       	ldi	r27, 0x41	; 65
    18fe:	8b 87       	std	Y+11, r24	; 0x0b
    1900:	9c 87       	std	Y+12, r25	; 0x0c
    1902:	ad 87       	std	Y+13, r26	; 0x0d
    1904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8f 83       	std	Y+7, r24	; 0x07
    1920:	98 87       	std	Y+8, r25	; 0x08
    1922:	a9 87       	std	Y+9, r26	; 0x09
    1924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1926:	6f 81       	ldd	r22, Y+7	; 0x07
    1928:	78 85       	ldd	r23, Y+8	; 0x08
    192a:	89 85       	ldd	r24, Y+9	; 0x09
    192c:	9a 85       	ldd	r25, Y+10	; 0x0a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_init+0x7a>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	6b 85       	ldd	r22, Y+11	; 0x0b
    1962:	7c 85       	ldd	r23, Y+12	; 0x0c
    1964:	8d 85       	ldd	r24, Y+13	; 0x0d
    1966:	9e 85       	ldd	r25, Y+14	; 0x0e
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_init+0xda>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_init+0xc8>
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_init+0xbc>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_init+0x104>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	63 e0       	ldi	r22, 0x03	; 3
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	65 e0       	ldi	r22, 0x05	; 5
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	66 e0       	ldi	r22, 0x06	; 6
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1a02:	83 e3       	ldi	r24, 0x33	; 51
    1a04:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1a08:	82 e3       	ldi	r24, 0x32	; 50
    1a0a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a0e:	88 e2       	ldi	r24, 0x28	; 40
    1a10:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a14:	8c e0       	ldi	r24, 0x0C	; 12
    1a16:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
}
    1a20:	2e 96       	adiw	r28, 0x0e	; 14
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	c3 56       	subi	r28, 0x63	; 99
    1a40:	d0 40       	sbci	r29, 0x00	; 0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ed 59       	subi	r30, 0x9D	; 157
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e1 5a       	subi	r30, 0xA1	; 161
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	a2 83       	std	Z+2, r26	; 0x02
    1a72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	8e 01       	movw	r16, r28
    1a76:	05 5a       	subi	r16, 0xA5	; 165
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e1 5a       	subi	r30, 0xA1	; 161
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a ef       	ldi	r20, 0xFA	; 250
    1a8e:	54 e4       	ldi	r21, 0x44	; 68
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	80 83       	st	Z, r24
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	a2 83       	std	Z+2, r26	; 0x02
    1aa0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	e5 5a       	subi	r30, 0xA5	; 165
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1abc:	88 23       	and	r24, r24
    1abe:	44 f4       	brge	.+16     	; 0x1ad0 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e7 5a       	subi	r30, 0xA7	; 167
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	64 c0       	rjmp	.+200    	; 0x1b98 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e5 5a       	subi	r30, 0xA5	; 165
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	0c f0       	brlt	.+2      	; 0x1af0 <LCD_sendCommand+0xbe>
    1aee:	43 c0       	rjmp	.+134    	; 0x1b76 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	fe 01       	movw	r30, r28
    1af2:	e1 5a       	subi	r30, 0xA1	; 161
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8e 01       	movw	r16, r28
    1b10:	07 5a       	subi	r16, 0xA7	; 167
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	f8 01       	movw	r30, r16
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	1f c0       	rjmp	.+62     	; 0x1b66 <LCD_sendCommand+0x134>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e9 5a       	subi	r30, 0xA9	; 169
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	fe 01       	movw	r30, r28
    1b38:	e9 5a       	subi	r30, 0xA9	; 169
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_sendCommand+0x10e>
    1b44:	fe 01       	movw	r30, r28
    1b46:	e9 5a       	subi	r30, 0xA9	; 169
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	de 01       	movw	r26, r28
    1b50:	a7 5a       	subi	r26, 0xA7	; 167
    1b52:	bf 4f       	sbci	r27, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	e7 5a       	subi	r30, 0xA7	; 167
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	9c 93       	st	X, r25
    1b64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	fe 01       	movw	r30, r28
    1b68:	e7 5a       	subi	r30, 0xA7	; 167
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	d1 f6       	brne	.-76     	; 0x1b28 <LCD_sendCommand+0xf6>
    1b74:	27 c0       	rjmp	.+78     	; 0x1bc4 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	8e 01       	movw	r16, r28
    1b78:	07 5a       	subi	r16, 0xA7	; 167
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e5 5a       	subi	r30, 0xA5	; 165
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	91 83       	std	Z+1, r25	; 0x01
    1b96:	80 83       	st	Z, r24
    1b98:	de 01       	movw	r26, r28
    1b9a:	ab 5a       	subi	r26, 0xAB	; 171
    1b9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	e7 5a       	subi	r30, 0xA7	; 167
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	91 81       	ldd	r25, Z+1	; 0x01
    1ba8:	8d 93       	st	X+, r24
    1baa:	9c 93       	st	X, r25
    1bac:	fe 01       	movw	r30, r28
    1bae:	eb 5a       	subi	r30, 0xAB	; 171
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_sendCommand+0x184>
    1bba:	fe 01       	movw	r30, r28
    1bbc:	eb 5a       	subi	r30, 0xAB	; 171
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ef 5a       	subi	r30, 0xAF	; 175
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	8e 01       	movw	r16, r28
    1be6:	03 5b       	subi	r16, 0xB3	; 179
    1be8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bea:	fe 01       	movw	r30, r28
    1bec:	ef 5a       	subi	r30, 0xAF	; 175
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	f8 01       	movw	r30, r16
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02
    1c10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e3 5b       	subi	r30, 0xB3	; 179
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	44 f4       	brge	.+16     	; 0x1c40 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c30:	fe 01       	movw	r30, r28
    1c32:	e5 5b       	subi	r30, 0xB5	; 181
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	64 c0       	rjmp	.+200    	; 0x1d08 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e3 5b       	subi	r30, 0xB3	; 179
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	0c f0       	brlt	.+2      	; 0x1c60 <LCD_sendCommand+0x22e>
    1c5e:	43 c0       	rjmp	.+134    	; 0x1ce6 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	fe 01       	movw	r30, r28
    1c62:	ef 5a       	subi	r30, 0xAF	; 175
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e2       	ldi	r20, 0x20	; 32
    1c74:	51 e4       	ldi	r21, 0x41	; 65
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8e 01       	movw	r16, r28
    1c80:	05 5b       	subi	r16, 0xB5	; 181
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	bc 01       	movw	r22, r24
    1c86:	cd 01       	movw	r24, r26
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	f8 01       	movw	r30, r16
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	1f c0       	rjmp	.+62     	; 0x1cd6 <LCD_sendCommand+0x2a4>
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e7 5b       	subi	r30, 0xB7	; 183
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e7 5b       	subi	r30, 0xB7	; 183
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_sendCommand+0x27e>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e7 5b       	subi	r30, 0xB7	; 183
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbe:	de 01       	movw	r26, r28
    1cc0:	a5 5b       	subi	r26, 0xB5	; 181
    1cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e5 5b       	subi	r30, 0xB5	; 181
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	9c 93       	st	X, r25
    1cd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 5b       	subi	r30, 0xB5	; 181
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	80 81       	ld	r24, Z
    1cde:	91 81       	ldd	r25, Z+1	; 0x01
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	d1 f6       	brne	.-76     	; 0x1c98 <LCD_sendCommand+0x266>
    1ce4:	27 c0       	rjmp	.+78     	; 0x1d34 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	05 5b       	subi	r16, 0xB5	; 181
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	fe 01       	movw	r30, r28
    1cee:	e3 5b       	subi	r30, 0xB3	; 179
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	f8 01       	movw	r30, r16
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	80 83       	st	Z, r24
    1d08:	de 01       	movw	r26, r28
    1d0a:	a9 5b       	subi	r26, 0xB9	; 185
    1d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e5 5b       	subi	r30, 0xB5	; 181
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	91 81       	ldd	r25, Z+1	; 0x01
    1d18:	8d 93       	st	X+, r24
    1d1a:	9c 93       	st	X, r25
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e9 5b       	subi	r30, 0xB9	; 185
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	80 81       	ld	r24, Z
    1d24:	91 81       	ldd	r25, Z+1	; 0x01
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_sendCommand+0x2f4>
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e9 5b       	subi	r30, 0xB9	; 185
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 59       	subi	r30, 0x9D	; 157
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	80 71       	andi	r24, 0x10	; 16
    1d42:	90 70       	andi	r25, 0x00	; 0
    1d44:	95 95       	asr	r25
    1d46:	87 95       	ror	r24
    1d48:	95 95       	asr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	95 95       	asr	r25
    1d4e:	87 95       	ror	r24
    1d50:	95 95       	asr	r25
    1d52:	87 95       	ror	r24
    1d54:	98 2f       	mov	r25, r24
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	63 e0       	ldi	r22, 0x03	; 3
    1d5a:	49 2f       	mov	r20, r25
    1d5c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 59       	subi	r30, 0x9D	; 157
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	80 72       	andi	r24, 0x20	; 32
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	95 95       	asr	r25
    1d72:	87 95       	ror	r24
    1d74:	95 95       	asr	r25
    1d76:	87 95       	ror	r24
    1d78:	95 95       	asr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	95 95       	asr	r25
    1d7e:	87 95       	ror	r24
    1d80:	95 95       	asr	r25
    1d82:	87 95       	ror	r24
    1d84:	98 2f       	mov	r25, r24
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	64 e0       	ldi	r22, 0x04	; 4
    1d8a:	49 2f       	mov	r20, r25
    1d8c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d90:	fe 01       	movw	r30, r28
    1d92:	ed 59       	subi	r30, 0x9D	; 157
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	80 74       	andi	r24, 0x40	; 64
    1d9e:	90 70       	andi	r25, 0x00	; 0
    1da0:	08 2e       	mov	r0, r24
    1da2:	89 2f       	mov	r24, r25
    1da4:	00 0c       	add	r0, r0
    1da6:	88 1f       	adc	r24, r24
    1da8:	99 0b       	sbc	r25, r25
    1daa:	00 0c       	add	r0, r0
    1dac:	88 1f       	adc	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	98 2f       	mov	r25, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	65 e0       	ldi	r22, 0x05	; 5
    1db6:	49 2f       	mov	r20, r25
    1db8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ed 59       	subi	r30, 0x9D	; 157
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	99 27       	eor	r25, r25
    1dca:	99 1f       	adc	r25, r25
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	66 e0       	ldi	r22, 0x06	; 6
    1dd0:	49 2f       	mov	r20, r25
    1dd2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	ed 5b       	subi	r30, 0xBD	; 189
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e8       	ldi	r26, 0x80	; 128
    1de2:	bf e3       	ldi	r27, 0x3F	; 63
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dec:	8e 01       	movw	r16, r28
    1dee:	01 5c       	subi	r16, 0xC1	; 193
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 5b       	subi	r30, 0xBD	; 189
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a ef       	ldi	r20, 0xFA	; 250
    1e06:	54 e4       	ldi	r21, 0x44	; 68
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	f8 01       	movw	r30, r16
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ff 96       	adiw	r30, 0x3f	; 63
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	2c f4       	brge	.+10     	; 0x1e40 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9e af       	std	Y+62, r25	; 0x3e
    1e3c:	8d af       	std	Y+61, r24	; 0x3d
    1e3e:	46 c0       	rjmp	.+140    	; 0x1ecc <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1e40:	fe 01       	movw	r30, r28
    1e42:	ff 96       	adiw	r30, 0x3f	; 63
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	64 f5       	brge	.+88     	; 0x1eb4 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 5b       	subi	r30, 0xBD	; 189
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e af       	std	Y+62, r25	; 0x3e
    1e88:	8d af       	std	Y+61, r24	; 0x3d
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <LCD_sendCommand+0x478>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c af       	std	Y+60, r25	; 0x3c
    1e92:	8b af       	std	Y+59, r24	; 0x3b
    1e94:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e96:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_sendCommand+0x466>
    1e9c:	9c af       	std	Y+60, r25	; 0x3c
    1e9e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9e af       	std	Y+62, r25	; 0x3e
    1ea8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <LCD_sendCommand+0x45a>
    1eb2:	16 c0       	rjmp	.+44     	; 0x1ee0 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e af       	std	Y+62, r25	; 0x3e
    1eca:	8d af       	std	Y+61, r24	; 0x3d
    1ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ece:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ed0:	9a af       	std	Y+58, r25	; 0x3a
    1ed2:	89 af       	std	Y+57, r24	; 0x39
    1ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_sendCommand+0x4a6>
    1edc:	9a af       	std	Y+58, r25	; 0x3a
    1ede:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	62 e0       	ldi	r22, 0x02	; 2
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	8d ab       	std	Y+53, r24	; 0x35
    1ef4:	9e ab       	std	Y+54, r25	; 0x36
    1ef6:	af ab       	std	Y+55, r26	; 0x37
    1ef8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	6d a9       	ldd	r22, Y+53	; 0x35
    1efc:	7e a9       	ldd	r23, Y+54	; 0x36
    1efe:	8f a9       	ldd	r24, Y+55	; 0x37
    1f00:	98 ad       	ldd	r25, Y+56	; 0x38
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a ef       	ldi	r20, 0xFA	; 250
    1f08:	54 e4       	ldi	r21, 0x44	; 68
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	89 ab       	std	Y+49, r24	; 0x31
    1f14:	9a ab       	std	Y+50, r25	; 0x32
    1f16:	ab ab       	std	Y+51, r26	; 0x33
    1f18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f1a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f1c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f20:	9c a9       	ldd	r25, Y+52	; 0x34
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	98 ab       	std	Y+48, r25	; 0x30
    1f38:	8f a7       	std	Y+47, r24	; 0x2f
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f40:	8b a9       	ldd	r24, Y+51	; 0x33
    1f42:	9c a9       	ldd	r25, Y+52	; 0x34
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	6d a9       	ldd	r22, Y+53	; 0x35
    1f56:	7e a9       	ldd	r23, Y+54	; 0x36
    1f58:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	98 ab       	std	Y+48, r25	; 0x30
    1f7a:	8f a7       	std	Y+47, r24	; 0x2f
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_sendCommand+0x56a>
    1f7e:	88 ec       	ldi	r24, 0xC8	; 200
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9e a7       	std	Y+46, r25	; 0x2e
    1f84:	8d a7       	std	Y+45, r24	; 0x2d
    1f86:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f88:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_sendCommand+0x558>
    1f8e:	9e a7       	std	Y+46, r25	; 0x2e
    1f90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f94:	98 a9       	ldd	r25, Y+48	; 0x30
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	98 ab       	std	Y+48, r25	; 0x30
    1f9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_sendCommand+0x54c>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1faa:	8b a9       	ldd	r24, Y+51	; 0x33
    1fac:	9c a9       	ldd	r25, Y+52	; 0x34
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	98 ab       	std	Y+48, r25	; 0x30
    1fb8:	8f a7       	std	Y+47, r24	; 0x2f
    1fba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fbe:	9c a7       	std	Y+44, r25	; 0x2c
    1fc0:	8b a7       	std	Y+43, r24	; 0x2b
    1fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x594>
    1fca:	9c a7       	std	Y+44, r25	; 0x2c
    1fcc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e8       	ldi	r26, 0x80	; 128
    1fde:	bf e3       	ldi	r27, 0x3F	; 63
    1fe0:	8f a3       	std	Y+39, r24	; 0x27
    1fe2:	98 a7       	std	Y+40, r25	; 0x28
    1fe4:	a9 a7       	std	Y+41, r26	; 0x29
    1fe6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fea:	78 a5       	ldd	r23, Y+40	; 0x28
    1fec:	89 a5       	ldd	r24, Y+41	; 0x29
    1fee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a ef       	ldi	r20, 0xFA	; 250
    1ff6:	54 e4       	ldi	r21, 0x44	; 68
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8b a3       	std	Y+35, r24	; 0x23
    2002:	9c a3       	std	Y+36, r25	; 0x24
    2004:	ad a3       	std	Y+37, r26	; 0x25
    2006:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2008:	6b a1       	ldd	r22, Y+35	; 0x23
    200a:	7c a1       	ldd	r23, Y+36	; 0x24
    200c:	8d a1       	ldd	r24, Y+37	; 0x25
    200e:	9e a1       	ldd	r25, Y+38	; 0x26
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9a a3       	std	Y+34, r25	; 0x22
    2026:	89 a3       	std	Y+33, r24	; 0x21
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    202a:	6b a1       	ldd	r22, Y+35	; 0x23
    202c:	7c a1       	ldd	r23, Y+36	; 0x24
    202e:	8d a1       	ldd	r24, Y+37	; 0x25
    2030:	9e a1       	ldd	r25, Y+38	; 0x26
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	6f a1       	ldd	r22, Y+39	; 0x27
    2044:	78 a5       	ldd	r23, Y+40	; 0x28
    2046:	89 a5       	ldd	r24, Y+41	; 0x29
    2048:	9a a5       	ldd	r25, Y+42	; 0x2a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9a a3       	std	Y+34, r25	; 0x22
    2068:	89 a3       	std	Y+33, r24	; 0x21
    206a:	0f c0       	rjmp	.+30     	; 0x208a <LCD_sendCommand+0x658>
    206c:	88 ec       	ldi	r24, 0xC8	; 200
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	98 a3       	std	Y+32, r25	; 0x20
    2072:	8f 8f       	std	Y+31, r24	; 0x1f
    2074:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2076:	98 a1       	ldd	r25, Y+32	; 0x20
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_sendCommand+0x646>
    207c:	98 a3       	std	Y+32, r25	; 0x20
    207e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	89 a1       	ldd	r24, Y+33	; 0x21
    2082:	9a a1       	ldd	r25, Y+34	; 0x22
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9a a3       	std	Y+34, r25	; 0x22
    2088:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <LCD_sendCommand+0x63a>
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	6b a1       	ldd	r22, Y+35	; 0x23
    2096:	7c a1       	ldd	r23, Y+36	; 0x24
    2098:	8d a1       	ldd	r24, Y+37	; 0x25
    209a:	9e a1       	ldd	r25, Y+38	; 0x26
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9a a3       	std	Y+34, r25	; 0x22
    20a6:	89 a3       	std	Y+33, r24	; 0x21
    20a8:	89 a1       	ldd	r24, Y+33	; 0x21
    20aa:	9a a1       	ldd	r25, Y+34	; 0x22
    20ac:	9e 8f       	std	Y+30, r25	; 0x1e
    20ae:	8d 8f       	std	Y+29, r24	; 0x1d
    20b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x682>
    20b8:	9e 8f       	std	Y+30, r25	; 0x1e
    20ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    20bc:	fe 01       	movw	r30, r28
    20be:	ed 59       	subi	r30, 0x9D	; 157
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	98 2f       	mov	r25, r24
    20c6:	91 70       	andi	r25, 0x01	; 1
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	63 e0       	ldi	r22, 0x03	; 3
    20cc:	49 2f       	mov	r20, r25
    20ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    20d2:	fe 01       	movw	r30, r28
    20d4:	ed 59       	subi	r30, 0x9D	; 157
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	82 70       	andi	r24, 0x02	; 2
    20e0:	90 70       	andi	r25, 0x00	; 0
    20e2:	95 95       	asr	r25
    20e4:	87 95       	ror	r24
    20e6:	98 2f       	mov	r25, r24
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	64 e0       	ldi	r22, 0x04	; 4
    20ec:	49 2f       	mov	r20, r25
    20ee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    20f2:	fe 01       	movw	r30, r28
    20f4:	ed 59       	subi	r30, 0x9D	; 157
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 81       	ld	r24, Z
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	84 70       	andi	r24, 0x04	; 4
    2100:	90 70       	andi	r25, 0x00	; 0
    2102:	95 95       	asr	r25
    2104:	87 95       	ror	r24
    2106:	95 95       	asr	r25
    2108:	87 95       	ror	r24
    210a:	98 2f       	mov	r25, r24
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	65 e0       	ldi	r22, 0x05	; 5
    2110:	49 2f       	mov	r20, r25
    2112:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2116:	fe 01       	movw	r30, r28
    2118:	ed 59       	subi	r30, 0x9D	; 157
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	88 70       	andi	r24, 0x08	; 8
    2124:	90 70       	andi	r25, 0x00	; 0
    2126:	95 95       	asr	r25
    2128:	87 95       	ror	r24
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	95 95       	asr	r25
    2130:	87 95       	ror	r24
    2132:	98 2f       	mov	r25, r24
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	66 e0       	ldi	r22, 0x06	; 6
    2138:	49 2f       	mov	r20, r25
    213a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a0 e8       	ldi	r26, 0x80	; 128
    2144:	bf e3       	ldi	r27, 0x3F	; 63
    2146:	89 8f       	std	Y+25, r24	; 0x19
    2148:	9a 8f       	std	Y+26, r25	; 0x1a
    214a:	ab 8f       	std	Y+27, r26	; 0x1b
    214c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214e:	69 8d       	ldd	r22, Y+25	; 0x19
    2150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a ef       	ldi	r20, 0xFA	; 250
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8d 8b       	std	Y+21, r24	; 0x15
    2168:	9e 8b       	std	Y+22, r25	; 0x16
    216a:	af 8b       	std	Y+23, r26	; 0x17
    216c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216e:	6d 89       	ldd	r22, Y+21	; 0x15
    2170:	7e 89       	ldd	r23, Y+22	; 0x16
    2172:	8f 89       	ldd	r24, Y+23	; 0x17
    2174:	98 8d       	ldd	r25, Y+24	; 0x18
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e8       	ldi	r20, 0x80	; 128
    217c:	5f e3       	ldi	r21, 0x3F	; 63
    217e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	3f c0       	rjmp	.+126    	; 0x220e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2190:	6d 89       	ldd	r22, Y+21	; 0x15
    2192:	7e 89       	ldd	r23, Y+22	; 0x16
    2194:	8f 89       	ldd	r24, Y+23	; 0x17
    2196:	98 8d       	ldd	r25, Y+24	; 0x18
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	3f ef       	ldi	r19, 0xFF	; 255
    219c:	4f e7       	ldi	r20, 0x7F	; 127
    219e:	57 e4       	ldi	r21, 0x47	; 71
    21a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	69 8d       	ldd	r22, Y+25	; 0x19
    21aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e2       	ldi	r20, 0x20	; 32
    21b6:	51 e4       	ldi	r21, 0x41	; 65
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9c 8b       	std	Y+20, r25	; 0x14
    21ce:	8b 8b       	std	Y+19, r24	; 0x13
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <LCD_sendCommand+0x7be>
    21d2:	88 ec       	ldi	r24, 0xC8	; 200
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9a 8b       	std	Y+18, r25	; 0x12
    21d8:	89 8b       	std	Y+17, r24	; 0x11
    21da:	89 89       	ldd	r24, Y+17	; 0x11
    21dc:	9a 89       	ldd	r25, Y+18	; 0x12
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_sendCommand+0x7ac>
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8b 89       	ldd	r24, Y+19	; 0x13
    21e8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9c 8b       	std	Y+20, r25	; 0x14
    21ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	00 97       	sbiw	r24, 0x00	; 0
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <LCD_sendCommand+0x7a0>
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6d 89       	ldd	r22, Y+21	; 0x15
    21fc:	7e 89       	ldd	r23, Y+22	; 0x16
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	98 8b       	std	Y+16, r25	; 0x10
    2214:	8f 87       	std	Y+15, r24	; 0x0f
    2216:	8f 85       	ldd	r24, Y+15	; 0x0f
    2218:	98 89       	ldd	r25, Y+16	; 0x10
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x7e8>
    221e:	98 8b       	std	Y+16, r25	; 0x10
    2220:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	62 e0       	ldi	r22, 0x02	; 2
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	8b 87       	std	Y+11, r24	; 0x0b
    2236:	9c 87       	std	Y+12, r25	; 0x0c
    2238:	ad 87       	std	Y+13, r26	; 0x0d
    223a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a ef       	ldi	r20, 0xFA	; 250
    224a:	54 e4       	ldi	r21, 0x44	; 68
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	a9 87       	std	Y+9, r26	; 0x09
    225a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_sendCommand+0x8ac>
    22c0:	88 ec       	ldi	r24, 0xC8	; 200
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_sendCommand+0x89a>
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_sendCommand+0x88e>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_sendCommand+0x8d6>
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2310:	cd 59       	subi	r28, 0x9D	; 157
    2312:	df 4f       	sbci	r29, 0xFF	; 255
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	08 95       	ret

00002328 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	c3 56       	subi	r28, 0x63	; 99
    2336:	d0 40       	sbci	r29, 0x00	; 0
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	fe 01       	movw	r30, r28
    2344:	ed 59       	subi	r30, 0x9D	; 157
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	41 e0       	ldi	r20, 0x01	; 1
    2350:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2354:	fe 01       	movw	r30, r28
    2356:	e1 5a       	subi	r30, 0xA1	; 161
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a0 e8       	ldi	r26, 0x80	; 128
    2360:	bf e3       	ldi	r27, 0x3F	; 63
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236a:	8e 01       	movw	r16, r28
    236c:	05 5a       	subi	r16, 0xA5	; 165
    236e:	1f 4f       	sbci	r17, 0xFF	; 255
    2370:	fe 01       	movw	r30, r28
    2372:	e1 5a       	subi	r30, 0xA1	; 161
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a ef       	ldi	r20, 0xFA	; 250
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	f8 01       	movw	r30, r16
    2390:	80 83       	st	Z, r24
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	a2 83       	std	Z+2, r26	; 0x02
    2396:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2398:	fe 01       	movw	r30, r28
    239a:	e5 5a       	subi	r30, 0xA5	; 165
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	44 f4       	brge	.+16     	; 0x23c6 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23b6:	fe 01       	movw	r30, r28
    23b8:	e7 5a       	subi	r30, 0xA7	; 167
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	64 c0       	rjmp	.+200    	; 0x248e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23c6:	fe 01       	movw	r30, r28
    23c8:	e5 5a       	subi	r30, 0xA5	; 165
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	0c f0       	brlt	.+2      	; 0x23e6 <LCD_displayCharacter+0xbe>
    23e4:	43 c0       	rjmp	.+134    	; 0x246c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e6:	fe 01       	movw	r30, r28
    23e8:	e1 5a       	subi	r30, 0xA1	; 161
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8e 01       	movw	r16, r28
    2406:	07 5a       	subi	r16, 0xA7	; 167
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	f8 01       	movw	r30, r16
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	1f c0       	rjmp	.+62     	; 0x245c <LCD_displayCharacter+0x134>
    241e:	fe 01       	movw	r30, r28
    2420:	e9 5a       	subi	r30, 0xA9	; 169
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	88 ec       	ldi	r24, 0xC8	; 200
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
    242c:	fe 01       	movw	r30, r28
    242e:	e9 5a       	subi	r30, 0xA9	; 169
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_displayCharacter+0x10e>
    243a:	fe 01       	movw	r30, r28
    243c:	e9 5a       	subi	r30, 0xA9	; 169
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	de 01       	movw	r26, r28
    2446:	a7 5a       	subi	r26, 0xA7	; 167
    2448:	bf 4f       	sbci	r27, 0xFF	; 255
    244a:	fe 01       	movw	r30, r28
    244c:	e7 5a       	subi	r30, 0xA7	; 167
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	11 96       	adiw	r26, 0x01	; 1
    2458:	9c 93       	st	X, r25
    245a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245c:	fe 01       	movw	r30, r28
    245e:	e7 5a       	subi	r30, 0xA7	; 167
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	d1 f6       	brne	.-76     	; 0x241e <LCD_displayCharacter+0xf6>
    246a:	27 c0       	rjmp	.+78     	; 0x24ba <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	8e 01       	movw	r16, r28
    246e:	07 5a       	subi	r16, 0xA7	; 167
    2470:	1f 4f       	sbci	r17, 0xFF	; 255
    2472:	fe 01       	movw	r30, r28
    2474:	e5 5a       	subi	r30, 0xA5	; 165
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	de 01       	movw	r26, r28
    2490:	ab 5a       	subi	r26, 0xAB	; 171
    2492:	bf 4f       	sbci	r27, 0xFF	; 255
    2494:	fe 01       	movw	r30, r28
    2496:	e7 5a       	subi	r30, 0xA7	; 167
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	8d 93       	st	X+, r24
    24a0:	9c 93       	st	X, r25
    24a2:	fe 01       	movw	r30, r28
    24a4:	eb 5a       	subi	r30, 0xAB	; 171
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <LCD_displayCharacter+0x184>
    24b0:	fe 01       	movw	r30, r28
    24b2:	eb 5a       	subi	r30, 0xAB	; 171
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	62 e0       	ldi	r22, 0x02	; 2
    24be:	41 e0       	ldi	r20, 0x01	; 1
    24c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5a       	subi	r30, 0xAF	; 175
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a0 e8       	ldi	r26, 0x80	; 128
    24d0:	bf e3       	ldi	r27, 0x3F	; 63
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24da:	8e 01       	movw	r16, r28
    24dc:	03 5b       	subi	r16, 0xB3	; 179
    24de:	1f 4f       	sbci	r17, 0xFF	; 255
    24e0:	fe 01       	movw	r30, r28
    24e2:	ef 5a       	subi	r30, 0xAF	; 175
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	f8 01       	movw	r30, r16
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2508:	fe 01       	movw	r30, r28
    250a:	e3 5b       	subi	r30, 0xB3	; 179
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	44 f4       	brge	.+16     	; 0x2536 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2526:	fe 01       	movw	r30, r28
    2528:	e5 5b       	subi	r30, 0xB5	; 181
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	64 c0       	rjmp	.+200    	; 0x25fe <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2536:	fe 01       	movw	r30, r28
    2538:	e3 5b       	subi	r30, 0xB3	; 179
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	0c f0       	brlt	.+2      	; 0x2556 <LCD_displayCharacter+0x22e>
    2554:	43 c0       	rjmp	.+134    	; 0x25dc <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	fe 01       	movw	r30, r28
    2558:	ef 5a       	subi	r30, 0xAF	; 175
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8e 01       	movw	r16, r28
    2576:	05 5b       	subi	r16, 0xB5	; 181
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
    258c:	1f c0       	rjmp	.+62     	; 0x25cc <LCD_displayCharacter+0x2a4>
    258e:	fe 01       	movw	r30, r28
    2590:	e7 5b       	subi	r30, 0xB7	; 183
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	80 83       	st	Z, r24
    259c:	fe 01       	movw	r30, r28
    259e:	e7 5b       	subi	r30, 0xB7	; 183
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_displayCharacter+0x27e>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e7 5b       	subi	r30, 0xB7	; 183
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	de 01       	movw	r26, r28
    25b6:	a5 5b       	subi	r26, 0xB5	; 181
    25b8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ba:	fe 01       	movw	r30, r28
    25bc:	e5 5b       	subi	r30, 0xB5	; 181
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	11 96       	adiw	r26, 0x01	; 1
    25c8:	9c 93       	st	X, r25
    25ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	fe 01       	movw	r30, r28
    25ce:	e5 5b       	subi	r30, 0xB5	; 181
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	d1 f6       	brne	.-76     	; 0x258e <LCD_displayCharacter+0x266>
    25da:	27 c0       	rjmp	.+78     	; 0x262a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	8e 01       	movw	r16, r28
    25de:	05 5b       	subi	r16, 0xB5	; 181
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	e3 5b       	subi	r30, 0xB3	; 179
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	de 01       	movw	r26, r28
    2600:	a9 5b       	subi	r26, 0xB9	; 185
    2602:	bf 4f       	sbci	r27, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	e5 5b       	subi	r30, 0xB5	; 181
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	8d 93       	st	X+, r24
    2610:	9c 93       	st	X, r25
    2612:	fe 01       	movw	r30, r28
    2614:	e9 5b       	subi	r30, 0xB9	; 185
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_displayCharacter+0x2f4>
    2620:	fe 01       	movw	r30, r28
    2622:	e9 5b       	subi	r30, 0xB9	; 185
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    262a:	fe 01       	movw	r30, r28
    262c:	ed 59       	subi	r30, 0x9D	; 157
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	80 71       	andi	r24, 0x10	; 16
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	95 95       	asr	r25
    263c:	87 95       	ror	r24
    263e:	95 95       	asr	r25
    2640:	87 95       	ror	r24
    2642:	95 95       	asr	r25
    2644:	87 95       	ror	r24
    2646:	95 95       	asr	r25
    2648:	87 95       	ror	r24
    264a:	98 2f       	mov	r25, r24
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	63 e0       	ldi	r22, 0x03	; 3
    2650:	49 2f       	mov	r20, r25
    2652:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2656:	fe 01       	movw	r30, r28
    2658:	ed 59       	subi	r30, 0x9D	; 157
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	80 72       	andi	r24, 0x20	; 32
    2664:	90 70       	andi	r25, 0x00	; 0
    2666:	95 95       	asr	r25
    2668:	87 95       	ror	r24
    266a:	95 95       	asr	r25
    266c:	87 95       	ror	r24
    266e:	95 95       	asr	r25
    2670:	87 95       	ror	r24
    2672:	95 95       	asr	r25
    2674:	87 95       	ror	r24
    2676:	95 95       	asr	r25
    2678:	87 95       	ror	r24
    267a:	98 2f       	mov	r25, r24
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	64 e0       	ldi	r22, 0x04	; 4
    2680:	49 2f       	mov	r20, r25
    2682:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2686:	fe 01       	movw	r30, r28
    2688:	ed 59       	subi	r30, 0x9D	; 157
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	80 74       	andi	r24, 0x40	; 64
    2694:	90 70       	andi	r25, 0x00	; 0
    2696:	08 2e       	mov	r0, r24
    2698:	89 2f       	mov	r24, r25
    269a:	00 0c       	add	r0, r0
    269c:	88 1f       	adc	r24, r24
    269e:	99 0b       	sbc	r25, r25
    26a0:	00 0c       	add	r0, r0
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	98 2f       	mov	r25, r24
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	65 e0       	ldi	r22, 0x05	; 5
    26ac:	49 2f       	mov	r20, r25
    26ae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    26b2:	fe 01       	movw	r30, r28
    26b4:	ed 59       	subi	r30, 0x9D	; 157
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	98 2f       	mov	r25, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	99 27       	eor	r25, r25
    26c0:	99 1f       	adc	r25, r25
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	66 e0       	ldi	r22, 0x06	; 6
    26c6:	49 2f       	mov	r20, r25
    26c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    26cc:	fe 01       	movw	r30, r28
    26ce:	ed 5b       	subi	r30, 0xBD	; 189
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e8       	ldi	r26, 0x80	; 128
    26d8:	bf e3       	ldi	r27, 0x3F	; 63
    26da:	80 83       	st	Z, r24
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	a2 83       	std	Z+2, r26	; 0x02
    26e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	8e 01       	movw	r16, r28
    26e4:	01 5c       	subi	r16, 0xC1	; 193
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 5b       	subi	r30, 0xBD	; 189
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2710:	fe 01       	movw	r30, r28
    2712:	ff 96       	adiw	r30, 0x3f	; 63
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e af       	std	Y+62, r25	; 0x3e
    2732:	8d af       	std	Y+61, r24	; 0x3d
    2734:	46 c0       	rjmp	.+140    	; 0x27c2 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2736:	fe 01       	movw	r30, r28
    2738:	ff 96       	adiw	r30, 0x3f	; 63
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	64 f5       	brge	.+88     	; 0x27aa <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e af       	std	Y+62, r25	; 0x3e
    277e:	8d af       	std	Y+61, r24	; 0x3d
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <LCD_displayCharacter+0x478>
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c af       	std	Y+60, r25	; 0x3c
    2788:	8b af       	std	Y+59, r24	; 0x3b
    278a:	8b ad       	ldd	r24, Y+59	; 0x3b
    278c:	9c ad       	ldd	r25, Y+60	; 0x3c
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_displayCharacter+0x466>
    2792:	9c af       	std	Y+60, r25	; 0x3c
    2794:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d ad       	ldd	r24, Y+61	; 0x3d
    2798:	9e ad       	ldd	r25, Y+62	; 0x3e
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e af       	std	Y+62, r25	; 0x3e
    279e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    27a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <LCD_displayCharacter+0x45a>
    27a8:	16 c0       	rjmp	.+44     	; 0x27d6 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	fe 01       	movw	r30, r28
    27ac:	ff 96       	adiw	r30, 0x3f	; 63
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e af       	std	Y+62, r25	; 0x3e
    27c0:	8d af       	std	Y+61, r24	; 0x3d
    27c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c6:	9a af       	std	Y+58, r25	; 0x3a
    27c8:	89 af       	std	Y+57, r24	; 0x39
    27ca:	89 ad       	ldd	r24, Y+57	; 0x39
    27cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_displayCharacter+0x4a6>
    27d2:	9a af       	std	Y+58, r25	; 0x3a
    27d4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	62 e0       	ldi	r22, 0x02	; 2
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	8d ab       	std	Y+53, r24	; 0x35
    27ea:	9e ab       	std	Y+54, r25	; 0x36
    27ec:	af ab       	std	Y+55, r26	; 0x37
    27ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6d a9       	ldd	r22, Y+53	; 0x35
    27f2:	7e a9       	ldd	r23, Y+54	; 0x36
    27f4:	8f a9       	ldd	r24, Y+55	; 0x37
    27f6:	98 ad       	ldd	r25, Y+56	; 0x38
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	89 ab       	std	Y+49, r24	; 0x31
    280a:	9a ab       	std	Y+50, r25	; 0x32
    280c:	ab ab       	std	Y+51, r26	; 0x33
    280e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2810:	69 a9       	ldd	r22, Y+49	; 0x31
    2812:	7a a9       	ldd	r23, Y+50	; 0x32
    2814:	8b a9       	ldd	r24, Y+51	; 0x33
    2816:	9c a9       	ldd	r25, Y+52	; 0x34
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	98 ab       	std	Y+48, r25	; 0x30
    282e:	8f a7       	std	Y+47, r24	; 0x2f
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2832:	69 a9       	ldd	r22, Y+49	; 0x31
    2834:	7a a9       	ldd	r23, Y+50	; 0x32
    2836:	8b a9       	ldd	r24, Y+51	; 0x33
    2838:	9c a9       	ldd	r25, Y+52	; 0x34
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6d a9       	ldd	r22, Y+53	; 0x35
    284c:	7e a9       	ldd	r23, Y+54	; 0x36
    284e:	8f a9       	ldd	r24, Y+55	; 0x37
    2850:	98 ad       	ldd	r25, Y+56	; 0x38
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	98 ab       	std	Y+48, r25	; 0x30
    2870:	8f a7       	std	Y+47, r24	; 0x2f
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_displayCharacter+0x56a>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9e a7       	std	Y+46, r25	; 0x2e
    287a:	8d a7       	std	Y+45, r24	; 0x2d
    287c:	8d a5       	ldd	r24, Y+45	; 0x2d
    287e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCharacter+0x558>
    2884:	9e a7       	std	Y+46, r25	; 0x2e
    2886:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8f a5       	ldd	r24, Y+47	; 0x2f
    288a:	98 a9       	ldd	r25, Y+48	; 0x30
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	98 ab       	std	Y+48, r25	; 0x30
    2890:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8f a5       	ldd	r24, Y+47	; 0x2f
    2894:	98 a9       	ldd	r25, Y+48	; 0x30
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_displayCharacter+0x54c>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	69 a9       	ldd	r22, Y+49	; 0x31
    289e:	7a a9       	ldd	r23, Y+50	; 0x32
    28a0:	8b a9       	ldd	r24, Y+51	; 0x33
    28a2:	9c a9       	ldd	r25, Y+52	; 0x34
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	98 ab       	std	Y+48, r25	; 0x30
    28ae:	8f a7       	std	Y+47, r24	; 0x2f
    28b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b2:	98 a9       	ldd	r25, Y+48	; 0x30
    28b4:	9c a7       	std	Y+44, r25	; 0x2c
    28b6:	8b a7       	std	Y+43, r24	; 0x2b
    28b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_displayCharacter+0x594>
    28c0:	9c a7       	std	Y+44, r25	; 0x2c
    28c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	41 e0       	ldi	r20, 0x01	; 1
    28ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e8       	ldi	r26, 0x80	; 128
    28d4:	bf e3       	ldi	r27, 0x3F	; 63
    28d6:	8f a3       	std	Y+39, r24	; 0x27
    28d8:	98 a7       	std	Y+40, r25	; 0x28
    28da:	a9 a7       	std	Y+41, r26	; 0x29
    28dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6f a1       	ldd	r22, Y+39	; 0x27
    28e0:	78 a5       	ldd	r23, Y+40	; 0x28
    28e2:	89 a5       	ldd	r24, Y+41	; 0x29
    28e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a ef       	ldi	r20, 0xFA	; 250
    28ec:	54 e4       	ldi	r21, 0x44	; 68
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8b a3       	std	Y+35, r24	; 0x23
    28f8:	9c a3       	std	Y+36, r25	; 0x24
    28fa:	ad a3       	std	Y+37, r26	; 0x25
    28fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2900:	7c a1       	ldd	r23, Y+36	; 0x24
    2902:	8d a1       	ldd	r24, Y+37	; 0x25
    2904:	9e a1       	ldd	r25, Y+38	; 0x26
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9a a3       	std	Y+34, r25	; 0x22
    291c:	89 a3       	std	Y+33, r24	; 0x21
    291e:	3f c0       	rjmp	.+126    	; 0x299e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2920:	6b a1       	ldd	r22, Y+35	; 0x23
    2922:	7c a1       	ldd	r23, Y+36	; 0x24
    2924:	8d a1       	ldd	r24, Y+37	; 0x25
    2926:	9e a1       	ldd	r25, Y+38	; 0x26
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6f a1       	ldd	r22, Y+39	; 0x27
    293a:	78 a5       	ldd	r23, Y+40	; 0x28
    293c:	89 a5       	ldd	r24, Y+41	; 0x29
    293e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9a a3       	std	Y+34, r25	; 0x22
    295e:	89 a3       	std	Y+33, r24	; 0x21
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <LCD_displayCharacter+0x658>
    2962:	88 ec       	ldi	r24, 0xC8	; 200
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	98 a3       	std	Y+32, r25	; 0x20
    2968:	8f 8f       	std	Y+31, r24	; 0x1f
    296a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    296c:	98 a1       	ldd	r25, Y+32	; 0x20
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_displayCharacter+0x646>
    2972:	98 a3       	std	Y+32, r25	; 0x20
    2974:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	89 a1       	ldd	r24, Y+33	; 0x21
    2978:	9a a1       	ldd	r25, Y+34	; 0x22
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9a a3       	std	Y+34, r25	; 0x22
    297e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	89 a1       	ldd	r24, Y+33	; 0x21
    2982:	9a a1       	ldd	r25, Y+34	; 0x22
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <LCD_displayCharacter+0x63a>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6b a1       	ldd	r22, Y+35	; 0x23
    298c:	7c a1       	ldd	r23, Y+36	; 0x24
    298e:	8d a1       	ldd	r24, Y+37	; 0x25
    2990:	9e a1       	ldd	r25, Y+38	; 0x26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	89 a3       	std	Y+33, r24	; 0x21
    299e:	89 a1       	ldd	r24, Y+33	; 0x21
    29a0:	9a a1       	ldd	r25, Y+34	; 0x22
    29a2:	9e 8f       	std	Y+30, r25	; 0x1e
    29a4:	8d 8f       	std	Y+29, r24	; 0x1d
    29a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x682>
    29ae:	9e 8f       	std	Y+30, r25	; 0x1e
    29b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    29b2:	fe 01       	movw	r30, r28
    29b4:	ed 59       	subi	r30, 0x9D	; 157
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	98 2f       	mov	r25, r24
    29bc:	91 70       	andi	r25, 0x01	; 1
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	63 e0       	ldi	r22, 0x03	; 3
    29c2:	49 2f       	mov	r20, r25
    29c4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    29c8:	fe 01       	movw	r30, r28
    29ca:	ed 59       	subi	r30, 0x9D	; 157
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	82 70       	andi	r24, 0x02	; 2
    29d6:	90 70       	andi	r25, 0x00	; 0
    29d8:	95 95       	asr	r25
    29da:	87 95       	ror	r24
    29dc:	98 2f       	mov	r25, r24
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	64 e0       	ldi	r22, 0x04	; 4
    29e2:	49 2f       	mov	r20, r25
    29e4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    29e8:	fe 01       	movw	r30, r28
    29ea:	ed 59       	subi	r30, 0x9D	; 157
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	88 2f       	mov	r24, r24
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	84 70       	andi	r24, 0x04	; 4
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	95 95       	asr	r25
    29fa:	87 95       	ror	r24
    29fc:	95 95       	asr	r25
    29fe:	87 95       	ror	r24
    2a00:	98 2f       	mov	r25, r24
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	65 e0       	ldi	r22, 0x05	; 5
    2a06:	49 2f       	mov	r20, r25
    2a08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ed 59       	subi	r30, 0x9D	; 157
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	88 70       	andi	r24, 0x08	; 8
    2a1a:	90 70       	andi	r25, 0x00	; 0
    2a1c:	95 95       	asr	r25
    2a1e:	87 95       	ror	r24
    2a20:	95 95       	asr	r25
    2a22:	87 95       	ror	r24
    2a24:	95 95       	asr	r25
    2a26:	87 95       	ror	r24
    2a28:	98 2f       	mov	r25, r24
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	66 e0       	ldi	r22, 0x06	; 6
    2a2e:	49 2f       	mov	r20, r25
    2a30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e8       	ldi	r26, 0x80	; 128
    2a3a:	bf e3       	ldi	r27, 0x3F	; 63
    2a3c:	89 8f       	std	Y+25, r24	; 0x19
    2a3e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a40:	ab 8f       	std	Y+27, r26	; 0x1b
    2a42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	69 8d       	ldd	r22, Y+25	; 0x19
    2a46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8d 8b       	std	Y+21, r24	; 0x15
    2a5e:	9e 8b       	std	Y+22, r25	; 0x16
    2a60:	af 8b       	std	Y+23, r26	; 0x17
    2a62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9c 8b       	std	Y+20, r25	; 0x14
    2a82:	8b 8b       	std	Y+19, r24	; 0x13
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a86:	6d 89       	ldd	r22, Y+21	; 0x15
    2a88:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	8b 8b       	std	Y+19, r24	; 0x13
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <LCD_displayCharacter+0x7be>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9a 8b       	std	Y+18, r25	; 0x12
    2ace:	89 8b       	std	Y+17, r24	; 0x11
    2ad0:	89 89       	ldd	r24, Y+17	; 0x11
    2ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_displayCharacter+0x7ac>
    2ad8:	9a 8b       	std	Y+18, r25	; 0x12
    2ada:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ade:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9c 8b       	std	Y+20, r25	; 0x14
    2ae4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <LCD_displayCharacter+0x7a0>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6d 89       	ldd	r22, Y+21	; 0x15
    2af2:	7e 89       	ldd	r23, Y+22	; 0x16
    2af4:	8f 89       	ldd	r24, Y+23	; 0x17
    2af6:	98 8d       	ldd	r25, Y+24	; 0x18
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	8b 89       	ldd	r24, Y+19	; 0x13
    2b06:	9c 89       	ldd	r25, Y+20	; 0x14
    2b08:	98 8b       	std	Y+16, r25	; 0x10
    2b0a:	8f 87       	std	Y+15, r24	; 0x0f
    2b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0e:	98 89       	ldd	r25, Y+16	; 0x10
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <LCD_displayCharacter+0x7e8>
    2b14:	98 8b       	std	Y+16, r25	; 0x10
    2b16:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	62 e0       	ldi	r22, 0x02	; 2
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e8       	ldi	r26, 0x80	; 128
    2b28:	bf e3       	ldi	r27, 0x3F	; 63
    2b2a:	8b 87       	std	Y+11, r24	; 0x0b
    2b2c:	9c 87       	std	Y+12, r25	; 0x0c
    2b2e:	ad 87       	std	Y+13, r26	; 0x0d
    2b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a ef       	ldi	r20, 0xFA	; 250
    2b40:	54 e4       	ldi	r21, 0x44	; 68
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	8f 83       	std	Y+7, r24	; 0x07
    2b4c:	98 87       	std	Y+8, r25	; 0x08
    2b4e:	a9 87       	std	Y+9, r26	; 0x09
    2b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b52:	6f 81       	ldd	r22, Y+7	; 0x07
    2b54:	78 85       	ldd	r23, Y+8	; 0x08
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	3f c0       	rjmp	.+126    	; 0x2bf2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b74:	6f 81       	ldd	r22, Y+7	; 0x07
    2b76:	78 85       	ldd	r23, Y+8	; 0x08
    2b78:	89 85       	ldd	r24, Y+9	; 0x09
    2b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	4c f5       	brge	.+82     	; 0x2bde <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <LCD_displayCharacter+0x8ac>
    2bb6:	88 ec       	ldi	r24, 0xC8	; 200
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9c 83       	std	Y+4, r25	; 0x04
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_displayCharacter+0x89a>
    2bc6:	9c 83       	std	Y+4, r25	; 0x04
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	69 f7       	brne	.-38     	; 0x2bb6 <LCD_displayCharacter+0x88e>
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	6f 81       	ldd	r22, Y+7	; 0x07
    2be0:	78 85       	ldd	r23, Y+8	; 0x08
    2be2:	89 85       	ldd	r24, Y+9	; 0x09
    2be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <LCD_displayCharacter+0x8d6>
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    2c04:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c06:	cd 59       	subi	r28, 0x9D	; 157
    2c08:	df 4f       	sbci	r29, 0xFF	; 255
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	cd bf       	out	0x3d, r28	; 61
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	1f 91       	pop	r17
    2c1a:	0f 91       	pop	r16
    2c1c:	08 95       	ret

00002c1e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <LCD_displayString+0x6>
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	9b 83       	std	Y+3, r25	; 0x03
    2c2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c2e:	19 82       	std	Y+1, r1	; 0x01
    2c30:	0e c0       	rjmp	.+28     	; 0x2c4e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f3 1f       	adc	r31, r19
    2c42:	80 81       	ld	r24, Z
    2c44:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_displayCharacter>
		i++;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	fc 01       	movw	r30, r24
    2c5a:	e2 0f       	add	r30, r18
    2c5c:	f3 1f       	adc	r31, r19
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 23       	and	r24, r24
    2c62:	39 f7       	brne	.-50     	; 0x2c32 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <LCD_displayStringPassword>:
/*
 * Description :
 * Display the required string on the screen as *
 */
void LCD_displayStringPassword(const char *Str)
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <LCD_displayStringPassword+0x6>
    2c76:	0f 92       	push	r0
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	9b 83       	std	Y+3, r25	; 0x03
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c80:	19 82       	std	Y+1, r1	; 0x01
    2c82:	06 c0       	rjmp	.+12     	; 0x2c90 <LCD_displayStringPassword+0x20>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter('*');
    2c84:	8a e2       	ldi	r24, 0x2A	; 42
    2c86:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_displayCharacter>
		i++;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen as *
 */
void LCD_displayStringPassword(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e2 0f       	add	r30, r18
    2c9e:	f3 1f       	adc	r31, r19
    2ca0:	80 81       	ld	r24, Z
    2ca2:	88 23       	and	r24, r24
    2ca4:	79 f7       	brne	.-34     	; 0x2c84 <LCD_displayStringPassword+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <LCD_moveCursor+0x6>
    2cb8:	00 d0       	rcall	.+0      	; 0x2cba <LCD_moveCursor+0x8>
    2cba:	0f 92       	push	r0
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	3d 83       	std	Y+5, r19	; 0x05
    2ccc:	2c 83       	std	Y+4, r18	; 0x04
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	c1 f0       	breq	.+48     	; 0x2d08 <LCD_moveCursor+0x56>
    2cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cda:	3d 81       	ldd	r19, Y+5	; 0x05
    2cdc:	22 30       	cpi	r18, 0x02	; 2
    2cde:	31 05       	cpc	r19, r1
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <LCD_moveCursor+0x3a>
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	61 f0       	breq	.+24     	; 0x2d02 <LCD_moveCursor+0x50>
    2cea:	19 c0       	rjmp	.+50     	; 0x2d1e <LCD_moveCursor+0x6c>
    2cec:	2c 81       	ldd	r18, Y+4	; 0x04
    2cee:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf0:	22 30       	cpi	r18, 0x02	; 2
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	69 f0       	breq	.+26     	; 0x2d10 <LCD_moveCursor+0x5e>
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfa:	83 30       	cpi	r24, 0x03	; 3
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	61 f0       	breq	.+24     	; 0x2d18 <LCD_moveCursor+0x66>
    2d00:	0e c0       	rjmp	.+28     	; 0x2d1e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	0b c0       	rjmp	.+22     	; 0x2d1e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	80 5c       	subi	r24, 0xC0	; 192
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	07 c0       	rjmp	.+14     	; 0x2d1e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	80 5f       	subi	r24, 0xF0	; 240
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	80 5b       	subi	r24, 0xB0	; 176
    2d1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	80 68       	ori	r24, 0x80	; 128
    2d22:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <LCD_displayStringRowColumn+0x6>
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <LCD_displayStringRowColumn+0x8>
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	6a 83       	std	Y+2, r22	; 0x02
    2d46:	5c 83       	std	Y+4, r21	; 0x04
    2d48:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2d4e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCD_displayString>
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	62 97       	sbiw	r28, 0x12	; 18
    2d72:	0f b6       	in	r0, 0x3f	; 63
    2d74:	f8 94       	cli
    2d76:	de bf       	out	0x3e, r29	; 62
    2d78:	0f be       	out	0x3f, r0	; 63
    2d7a:	cd bf       	out	0x3d, r28	; 61
    2d7c:	9a 8b       	std	Y+18, r25	; 0x12
    2d7e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d80:	89 89       	ldd	r24, Y+17	; 0x11
    2d82:	9a 89       	ldd	r25, Y+18	; 0x12
    2d84:	9e 01       	movw	r18, r28
    2d86:	2f 5f       	subi	r18, 0xFF	; 255
    2d88:	3f 4f       	sbci	r19, 0xFF	; 255
    2d8a:	b9 01       	movw	r22, r18
    2d8c:	4a e0       	ldi	r20, 0x0A	; 10
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <itoa>
   LCD_displayStringPassword(buff); /* Display the string */
    2d94:	ce 01       	movw	r24, r28
    2d96:	01 96       	adiw	r24, 0x01	; 1
    2d98:	0e 94 38 16 	call	0x2c70	; 0x2c70 <LCD_displayStringPassword>
}
    2d9c:	62 96       	adiw	r28, 0x12	; 18
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <LCD_sendCommand>
}
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <CountSeconds>:
uint8 PassChecking = 1;

uint8 g_sec = 0;

//Function to increase the global seconds variable
void CountSeconds(void) {
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    2dca:	80 91 3a 01 	lds	r24, 0x013A
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 3a 01 	sts	0x013A, r24
}
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <Password_adjust>:

//saving the password in an array
//displaying * as it is an pass
//adjusting the enter value(=) & the numbers pressed in the keypad
void Password_adjust(uint8 *pass_temp) {
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	61 97       	sbiw	r28, 0x11	; 17
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	99 8b       	std	Y+17, r25	; 0x11
    2df0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 key_num = 0;
    2df2:	1f 86       	std	Y+15, r1	; 0x0f
	while (1) {
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
    2df4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <KEYPAD_getPressedKey>
    2df8:	80 93 46 01 	sts	0x0146, r24
		if (key_num < 5) {
    2dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfe:	85 30       	cpi	r24, 0x05	; 5
    2e00:	08 f0       	brcs	.+2      	; 0x2e04 <Password_adjust+0x2a>
    2e02:	8a c0       	rjmp	.+276    	; 0x2f18 <Password_adjust+0x13e>
			if ((key <= 9) && (key >= 0)) {
    2e04:	80 91 46 01 	lds	r24, 0x0146
    2e08:	8a 30       	cpi	r24, 0x0A	; 10
    2e0a:	a0 f4       	brcc	.+40     	; 0x2e34 <Password_adjust+0x5a>
				LCD_intgerToString(key); /* display the pressed keypad switch */
    2e0c:	80 91 46 01 	lds	r24, 0x0146
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <LCD_intgerToString>
				//store the password in an array
				pass_temp[key_num] = key;
    2e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	88 89       	ldd	r24, Y+16	; 0x10
    2e20:	99 89       	ldd	r25, Y+17	; 0x11
    2e22:	fc 01       	movw	r30, r24
    2e24:	e2 0f       	add	r30, r18
    2e26:	f3 1f       	adc	r31, r19
    2e28:	80 91 46 01 	lds	r24, 0x0146
    2e2c:	80 83       	st	Z, r24
				key_num++;
    2e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	8f 87       	std	Y+15, r24	; 0x0f
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	aa ef       	ldi	r26, 0xFA	; 250
    2e3a:	b3 e4       	ldi	r27, 0x43	; 67
    2e3c:	8b 87       	std	Y+11, r24	; 0x0b
    2e3e:	9c 87       	std	Y+12, r25	; 0x0c
    2e40:	ad 87       	std	Y+13, r26	; 0x0d
    2e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a ef       	ldi	r20, 0xFA	; 250
    2e52:	54 e4       	ldi	r21, 0x44	; 68
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8f 83       	std	Y+7, r24	; 0x07
    2e5e:	98 87       	std	Y+8, r25	; 0x08
    2e60:	a9 87       	std	Y+9, r26	; 0x09
    2e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e64:	6f 81       	ldd	r22, Y+7	; 0x07
    2e66:	78 85       	ldd	r23, Y+8	; 0x08
    2e68:	89 85       	ldd	r24, Y+9	; 0x09
    2e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <Password_adjust+0xac>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	8d 83       	std	Y+5, r24	; 0x05
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <Password_adjust+0x12a>
	else if (__tmp > 65535)
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <Password_adjust+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <Password_adjust+0x10c>
    2ec8:	88 ec       	ldi	r24, 0xC8	; 200
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <Password_adjust+0xfa>
    2ed8:	9c 83       	std	Y+4, r25	; 0x04
    2eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9e 83       	std	Y+6, r25	; 0x06
    2ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <Password_adjust+0xee>
    2eee:	14 c0       	rjmp	.+40     	; 0x2f18 <Password_adjust+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef2:	78 85       	ldd	r23, Y+8	; 0x08
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <Password_adjust+0x136>
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500); /* Press time */
		}
		//after entering the pass of 5 numbers
		//wait for pressing "=" as enter to continue execution
		if (key == '=') {
    2f18:	80 91 46 01 	lds	r24, 0x0146
    2f1c:	8d 33       	cpi	r24, 0x3D	; 61
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <Password_adjust+0x148>
    2f20:	69 cf       	rjmp	.-302    	; 0x2df4 <Password_adjust+0x1a>
			break;
		}
	}

}
    2f22:	61 96       	adiw	r28, 0x11	; 17
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <EnterPass_Sequence>:

//Entering pass sequence "Display"
void EnterPass_Sequence(void) {
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2f3c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "PLZ enter pass:");
    2f40:	20 e6       	ldi	r18, 0x60	; 96
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	a9 01       	movw	r20, r18
    2f4a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0); /* Move the cursor to the second row */
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
	Password_adjust(pass);
    2f56:	8c e3       	ldi	r24, 0x3C	; 60
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
	LCD_displayStringRowColumn(0, 0, "PLZ re-enter the");
    2f5e:	20 e7       	ldi	r18, 0x70	; 112
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	a9 01       	movw	r20, r18
    2f68:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "same pass:");
    2f6c:	21 e8       	ldi	r18, 0x81	; 129
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	a9 01       	movw	r20, r18
    2f76:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 11);
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	6b e0       	ldi	r22, 0x0B	; 11
    2f7e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
	Password_adjust(pass2);
    2f82:	81 e4       	ldi	r24, 0x41	; 65
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
}
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <PassWrong_case>:
//Function perform as the password is matched or not matched
//function parameters -> another function
//							as to :
//								1)call the Door_Squence function
//								2)call the EnterPass function
void PassWrong_case(void(*func)(void)){
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <PassWrong_case+0x6>
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	if (PassChecking == MATCH) {
    2f9e:	80 91 2a 01 	lds	r24, 0x012A
    2fa2:	82 30       	cpi	r24, 0x02	; 2
    2fa4:	21 f4       	brne	.+8      	; 0x2fae <PassWrong_case+0x1e>
		(*func)();
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	09 95       	icall
    2fac:	60 c0       	rjmp	.+192    	; 0x306e <PassWrong_case+0xde>
	} else {
		LCD_displayStringRowColumn(0, 0,"1 -> Wrong Pass");
    2fae:	2c e8       	ldi	r18, 0x8C	; 140
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "pass: ");
    2fbc:	2c e9       	ldi	r18, 0x9C	; 156
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	a9 01       	movw	r20, r18
    2fc6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 6); /* Move the cursor to the second row & column 6*/
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	66 e0       	ldi	r22, 0x06	; 6
    2fce:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
		Password_adjust(pass);
    2fd2:	8c e3       	ldi	r24, 0x3C	; 60
    2fd4:	91 e0       	ldi	r25, 0x01	; 1
    2fd6:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
		SendPass(pass);
    2fda:	8c e3       	ldi	r24, 0x3C	; 60
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	0e 94 3c 18 	call	0x3078	; 0x3078 <SendPass>
		PassChecking = UART_recieveByte();
    2fe2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    2fe6:	80 93 2a 01 	sts	0x012A, r24
		LCD_clearScreen();
    2fea:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
		if (PassChecking == MATCH) {
    2fee:	80 91 2a 01 	lds	r24, 0x012A
    2ff2:	82 30       	cpi	r24, 0x02	; 2
    2ff4:	21 f4       	brne	.+8      	; 0x2ffe <PassWrong_case+0x6e>
			(*func)();
    2ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffa:	09 95       	icall
    2ffc:	38 c0       	rjmp	.+112    	; 0x306e <PassWrong_case+0xde>
		} else {
			LCD_displayStringRowColumn(0, 0,"2 -> Wrong Pass");
    2ffe:	23 ea       	ldi	r18, 0xA3	; 163
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	a9 01       	movw	r20, r18
    3008:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    300c:	2c e9       	ldi	r18, 0x9C	; 156
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	a9 01       	movw	r20, r18
    3016:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 6); /* Move the cursor to the second row & column 6*/
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	66 e0       	ldi	r22, 0x06	; 6
    301e:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
			Password_adjust(pass);
    3022:	8c e3       	ldi	r24, 0x3C	; 60
    3024:	91 e0       	ldi	r25, 0x01	; 1
    3026:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
			SendPass(pass);
    302a:	8c e3       	ldi	r24, 0x3C	; 60
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	0e 94 3c 18 	call	0x3078	; 0x3078 <SendPass>
			PassChecking = UART_recieveByte();
    3032:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    3036:	80 93 2a 01 	sts	0x012A, r24
			LCD_clearScreen();
    303a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
			if (PassChecking == MATCH) {
    303e:	80 91 2a 01 	lds	r24, 0x012A
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	21 f4       	brne	.+8      	; 0x304e <PassWrong_case+0xbe>
				(*func)();
    3046:	e9 81       	ldd	r30, Y+1	; 0x01
    3048:	fa 81       	ldd	r31, Y+2	; 0x02
    304a:	09 95       	icall
    304c:	10 c0       	rjmp	.+32     	; 0x306e <PassWrong_case+0xde>
			} else {
				LCD_displayStringRowColumn(0, 0,"ERROR!!");
    304e:	23 eb       	ldi	r18, 0xB3	; 179
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	a9 01       	movw	r20, r18
    3058:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "3 wrong passes");
    305c:	2b eb       	ldi	r18, 0xBB	; 187
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	a9 01       	movw	r20, r18
    3066:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
				Polling_one_minute();
    306a:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <Polling_one_minute>
			}
		}
	}
}
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <SendPass>:

//Send pass to control_ecu through UART
void SendPass(uint8 *pass) {
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <SendPass+0x6>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < 5; i++) {
    3088:	19 82       	std	Y+1, r1	; 0x01
    308a:	0e c0       	rjmp	.+28     	; 0x30a8 <SendPass+0x30>
		UART_sendByte(pass[i]);
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	9b 81       	ldd	r25, Y+3	; 0x03
    3096:	fc 01       	movw	r30, r24
    3098:	e2 0f       	add	r30, r18
    309a:	f3 1f       	adc	r31, r19
    309c:	80 81       	ld	r24, Z
    309e:	0e 94 41 0a 	call	0x1482	; 0x1482 <UART_sendByte>
	}
}

//Send pass to control_ecu through UART
void SendPass(uint8 *pass) {
	for (uint8 i = 0; i < 5; i++) {
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	8f 5f       	subi	r24, 0xFF	; 255
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	85 30       	cpi	r24, 0x05	; 5
    30ac:	78 f3       	brcs	.-34     	; 0x308c <SendPass+0x14>
		UART_sendByte(pass[i]);
	}
}
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <SendPass2>:

//Send pass2 to control_ecu through UART
void SendPass2(uint8 *pass2) {
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <SendPass2+0x6>
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9b 83       	std	Y+3, r25	; 0x03
    30c8:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < 5; i++) {
    30ca:	19 82       	std	Y+1, r1	; 0x01
    30cc:	0e c0       	rjmp	.+28     	; 0x30ea <SendPass2+0x30>
		UART_sendByte(pass2[i]);
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	fc 01       	movw	r30, r24
    30da:	e2 0f       	add	r30, r18
    30dc:	f3 1f       	adc	r31, r19
    30de:	80 81       	ld	r24, Z
    30e0:	0e 94 41 0a 	call	0x1482	; 0x1482 <UART_sendByte>
	}
}

//Send pass2 to control_ecu through UART
void SendPass2(uint8 *pass2) {
	for (uint8 i = 0; i < 5; i++) {
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	8f 5f       	subi	r24, 0xFF	; 255
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	85 30       	cpi	r24, 0x05	; 5
    30ee:	78 f3       	brcs	.-34     	; 0x30ce <SendPass2+0x14>
		UART_sendByte(pass2[i]);
	}
}
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <DelaySeconds>:


//function that counts the sec by :
//causing an interrupt every second
void DelaySeconds(uint8 sec) {
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	2c 97       	sbiw	r28, 0x0c	; 12
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	8f 83       	std	Y+7, r24	; 0x07

	/* setting the callBack function to count seconds */
	Timer1_setCallBack(CountSeconds);
    3112:	81 ee       	ldi	r24, 0xE1	; 225
    3114:	96 e1       	ldi	r25, 0x16	; 22
    3116:	0e 94 4e 09 	call	0x129c	; 0x129c <Timer1_setCallBack>

	/* timer1 configurations -> count 1 second per interrupt */
	Timer1_ConfigType timer1Config = { 0, 31250, F_CPU_256, CompareMode };
    311a:	ce 01       	movw	r24, r28
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	99 87       	std	Y+9, r25	; 0x09
    3120:	88 87       	std	Y+8, r24	; 0x08
    3122:	eb e2       	ldi	r30, 0x2B	; 43
    3124:	f1 e0       	ldi	r31, 0x01	; 1
    3126:	fb 87       	std	Y+11, r31	; 0x0b
    3128:	ea 87       	std	Y+10, r30	; 0x0a
    312a:	f6 e0       	ldi	r31, 0x06	; 6
    312c:	fc 87       	std	Y+12, r31	; 0x0c
    312e:	ea 85       	ldd	r30, Y+10	; 0x0a
    3130:	fb 85       	ldd	r31, Y+11	; 0x0b
    3132:	00 80       	ld	r0, Z
    3134:	8a 85       	ldd	r24, Y+10	; 0x0a
    3136:	9b 85       	ldd	r25, Y+11	; 0x0b
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	9b 87       	std	Y+11, r25	; 0x0b
    313c:	8a 87       	std	Y+10, r24	; 0x0a
    313e:	e8 85       	ldd	r30, Y+8	; 0x08
    3140:	f9 85       	ldd	r31, Y+9	; 0x09
    3142:	00 82       	st	Z, r0
    3144:	88 85       	ldd	r24, Y+8	; 0x08
    3146:	99 85       	ldd	r25, Y+9	; 0x09
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	99 87       	std	Y+9, r25	; 0x09
    314c:	88 87       	std	Y+8, r24	; 0x08
    314e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3150:	91 50       	subi	r25, 0x01	; 1
    3152:	9c 87       	std	Y+12, r25	; 0x0c
    3154:	ec 85       	ldd	r30, Y+12	; 0x0c
    3156:	ee 23       	and	r30, r30
    3158:	51 f7       	brne	.-44     	; 0x312e <DelaySeconds+0x32>

	TIMER1_Init(&timer1Config);
    315a:	ce 01       	movw	r24, r28
    315c:	01 96       	adiw	r24, 0x01	; 1
    315e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <TIMER1_Init>

	//stay in the loop until finishing count of seconds
	while (g_sec < sec)
    3162:	90 91 3a 01 	lds	r25, 0x013A
    3166:	8f 81       	ldd	r24, Y+7	; 0x07
    3168:	98 17       	cp	r25, r24
    316a:	d8 f3       	brcs	.-10     	; 0x3162 <DelaySeconds+0x66>
		;

	//safarna al global variable 3lshan al mara aly gya
	g_sec = 0;
    316c:	10 92 3a 01 	sts	0x013A, r1

	Timer1_deInit();
    3170:	0e 94 36 09 	call	0x126c	; 0x126c <Timer1_deInit>
}
    3174:	2c 96       	adiw	r28, 0x0c	; 12
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <EnterPass>:

//Pass Entering
//if the two passes are not the same -> then stay in the loop
//until the user enters the same two passes
void EnterPass(void) {
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	do {
		LCD_clearScreen();
    318e:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
		EnterPass_Sequence();
    3192:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <EnterPass_Sequence>
		SendPass(pass);
    3196:	8c e3       	ldi	r24, 0x3C	; 60
    3198:	91 e0       	ldi	r25, 0x01	; 1
    319a:	0e 94 3c 18 	call	0x3078	; 0x3078 <SendPass>
		SendPass2(pass2);
    319e:	81 e4       	ldi	r24, 0x41	; 65
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	0e 94 5d 18 	call	0x30ba	; 0x30ba <SendPass2>
		PassChecking = UART_recieveByte();
    31a6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    31aa:	80 93 2a 01 	sts	0x012A, r24
	} while (PassChecking == FAILED);
    31ae:	80 91 2a 01 	lds	r24, 0x012A
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	61 f3       	breq	.-40     	; 0x318e <EnterPass+0x8>
}
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <SendKey>:

//Send the key entered by the user through UART
void SendKey(void) {
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(key);
    31c4:	80 91 46 01 	lds	r24, 0x0146
    31c8:	0e 94 41 0a 	call	0x1482	; 0x1482 <UART_sendByte>
}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	08 95       	ret

000031d2 <Door_Sequence>:

//Door Sequence "Display"
void Door_Sequence(void){
    31d2:	0f 93       	push	r16
    31d4:	1f 93       	push	r17
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	c2 56       	subi	r28, 0x62	; 98
    31e0:	d0 40       	sbci	r29, 0x00	; 0
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    31ec:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
	LCD_displayString("DoorIsUnlocking");
    31f0:	8a ec       	ldi	r24, 0xCA	; 202
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCD_displayString>
    31f8:	fe 01       	movw	r30, r28
    31fa:	e1 5a       	subi	r30, 0xA1	; 161
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	90 e8       	ldi	r25, 0x80	; 128
    3202:	ab eb       	ldi	r26, 0xBB	; 187
    3204:	b5 e4       	ldi	r27, 0x45	; 69
    3206:	80 83       	st	Z, r24
    3208:	91 83       	std	Z+1, r25	; 0x01
    320a:	a2 83       	std	Z+2, r26	; 0x02
    320c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320e:	8e 01       	movw	r16, r28
    3210:	05 5a       	subi	r16, 0xA5	; 165
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	fe 01       	movw	r30, r28
    3216:	e1 5a       	subi	r30, 0xA1	; 161
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	4a ef       	ldi	r20, 0xFA	; 250
    3228:	54 e4       	ldi	r21, 0x44	; 68
    322a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	f8 01       	movw	r30, r16
    3234:	80 83       	st	Z, r24
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	a2 83       	std	Z+2, r26	; 0x02
    323a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    323c:	fe 01       	movw	r30, r28
    323e:	e5 5a       	subi	r30, 0xA5	; 165
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e8       	ldi	r20, 0x80	; 128
    3250:	5f e3       	ldi	r21, 0x3F	; 63
    3252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3256:	88 23       	and	r24, r24
    3258:	44 f4       	brge	.+16     	; 0x326a <Door_Sequence+0x98>
		__ticks = 1;
    325a:	fe 01       	movw	r30, r28
    325c:	e7 5a       	subi	r30, 0xA7	; 167
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24
    3268:	64 c0       	rjmp	.+200    	; 0x3332 <Door_Sequence+0x160>
	else if (__tmp > 65535)
    326a:	fe 01       	movw	r30, r28
    326c:	e5 5a       	subi	r30, 0xA5	; 165
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	3f ef       	ldi	r19, 0xFF	; 255
    327c:	4f e7       	ldi	r20, 0x7F	; 127
    327e:	57 e4       	ldi	r21, 0x47	; 71
    3280:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3284:	18 16       	cp	r1, r24
    3286:	0c f0       	brlt	.+2      	; 0x328a <Door_Sequence+0xb8>
    3288:	43 c0       	rjmp	.+134    	; 0x3310 <Door_Sequence+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328a:	fe 01       	movw	r30, r28
    328c:	e1 5a       	subi	r30, 0xA1	; 161
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	60 81       	ld	r22, Z
    3292:	71 81       	ldd	r23, Z+1	; 0x01
    3294:	82 81       	ldd	r24, Z+2	; 0x02
    3296:	93 81       	ldd	r25, Z+3	; 0x03
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e2       	ldi	r20, 0x20	; 32
    329e:	51 e4       	ldi	r21, 0x41	; 65
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8e 01       	movw	r16, r28
    32aa:	07 5a       	subi	r16, 0xA7	; 167
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	f8 01       	movw	r30, r16
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	80 83       	st	Z, r24
    32c0:	1f c0       	rjmp	.+62     	; 0x3300 <Door_Sequence+0x12e>
    32c2:	fe 01       	movw	r30, r28
    32c4:	e9 5a       	subi	r30, 0xA9	; 169
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	88 ec       	ldi	r24, 0xC8	; 200
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	91 83       	std	Z+1, r25	; 0x01
    32ce:	80 83       	st	Z, r24
    32d0:	fe 01       	movw	r30, r28
    32d2:	e9 5a       	subi	r30, 0xA9	; 169
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <Door_Sequence+0x108>
    32de:	fe 01       	movw	r30, r28
    32e0:	e9 5a       	subi	r30, 0xA9	; 169
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e8:	de 01       	movw	r26, r28
    32ea:	a7 5a       	subi	r26, 0xA7	; 167
    32ec:	bf 4f       	sbci	r27, 0xFF	; 255
    32ee:	fe 01       	movw	r30, r28
    32f0:	e7 5a       	subi	r30, 0xA7	; 167
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	80 81       	ld	r24, Z
    32f6:	91 81       	ldd	r25, Z+1	; 0x01
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	11 96       	adiw	r26, 0x01	; 1
    32fc:	9c 93       	st	X, r25
    32fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3300:	fe 01       	movw	r30, r28
    3302:	e7 5a       	subi	r30, 0xA7	; 167
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	d1 f6       	brne	.-76     	; 0x32c2 <Door_Sequence+0xf0>
    330e:	27 c0       	rjmp	.+78     	; 0x335e <Door_Sequence+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3310:	8e 01       	movw	r16, r28
    3312:	07 5a       	subi	r16, 0xA7	; 167
    3314:	1f 4f       	sbci	r17, 0xFF	; 255
    3316:	fe 01       	movw	r30, r28
    3318:	e5 5a       	subi	r30, 0xA5	; 165
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	f8 01       	movw	r30, r16
    332e:	91 83       	std	Z+1, r25	; 0x01
    3330:	80 83       	st	Z, r24
    3332:	de 01       	movw	r26, r28
    3334:	ab 5a       	subi	r26, 0xAB	; 171
    3336:	bf 4f       	sbci	r27, 0xFF	; 255
    3338:	fe 01       	movw	r30, r28
    333a:	e7 5a       	subi	r30, 0xA7	; 167
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	8d 93       	st	X+, r24
    3344:	9c 93       	st	X, r25
    3346:	fe 01       	movw	r30, r28
    3348:	eb 5a       	subi	r30, 0xAB	; 171
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <Door_Sequence+0x17e>
    3354:	fe 01       	movw	r30, r28
    3356:	eb 5a       	subi	r30, 0xAB	; 171
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	91 83       	std	Z+1, r25	; 0x01
    335c:	80 83       	st	Z, r24
    335e:	fe 01       	movw	r30, r28
    3360:	ef 5a       	subi	r30, 0xAF	; 175
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e8       	ldi	r25, 0x80	; 128
    3368:	ab eb       	ldi	r26, 0xBB	; 187
    336a:	b5 e4       	ldi	r27, 0x45	; 69
    336c:	80 83       	st	Z, r24
    336e:	91 83       	std	Z+1, r25	; 0x01
    3370:	a2 83       	std	Z+2, r26	; 0x02
    3372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3374:	8e 01       	movw	r16, r28
    3376:	03 5b       	subi	r16, 0xB3	; 179
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	fe 01       	movw	r30, r28
    337c:	ef 5a       	subi	r30, 0xAF	; 175
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	4a ef       	ldi	r20, 0xFA	; 250
    338e:	54 e4       	ldi	r21, 0x44	; 68
    3390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	f8 01       	movw	r30, r16
    339a:	80 83       	st	Z, r24
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	a2 83       	std	Z+2, r26	; 0x02
    33a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33a2:	fe 01       	movw	r30, r28
    33a4:	e3 5b       	subi	r30, 0xB3	; 179
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	60 81       	ld	r22, Z
    33aa:	71 81       	ldd	r23, Z+1	; 0x01
    33ac:	82 81       	ldd	r24, Z+2	; 0x02
    33ae:	93 81       	ldd	r25, Z+3	; 0x03
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	44 f4       	brge	.+16     	; 0x33d0 <Door_Sequence+0x1fe>
		__ticks = 1;
    33c0:	fe 01       	movw	r30, r28
    33c2:	e5 5b       	subi	r30, 0xB5	; 181
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	91 83       	std	Z+1, r25	; 0x01
    33cc:	80 83       	st	Z, r24
    33ce:	64 c0       	rjmp	.+200    	; 0x3498 <Door_Sequence+0x2c6>
	else if (__tmp > 65535)
    33d0:	fe 01       	movw	r30, r28
    33d2:	e3 5b       	subi	r30, 0xB3	; 179
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	60 81       	ld	r22, Z
    33d8:	71 81       	ldd	r23, Z+1	; 0x01
    33da:	82 81       	ldd	r24, Z+2	; 0x02
    33dc:	93 81       	ldd	r25, Z+3	; 0x03
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	3f ef       	ldi	r19, 0xFF	; 255
    33e2:	4f e7       	ldi	r20, 0x7F	; 127
    33e4:	57 e4       	ldi	r21, 0x47	; 71
    33e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33ea:	18 16       	cp	r1, r24
    33ec:	0c f0       	brlt	.+2      	; 0x33f0 <Door_Sequence+0x21e>
    33ee:	43 c0       	rjmp	.+134    	; 0x3476 <Door_Sequence+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	fe 01       	movw	r30, r28
    33f2:	ef 5a       	subi	r30, 0xAF	; 175
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e2       	ldi	r20, 0x20	; 32
    3404:	51 e4       	ldi	r21, 0x41	; 65
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8e 01       	movw	r16, r28
    3410:	05 5b       	subi	r16, 0xB5	; 181
    3412:	1f 4f       	sbci	r17, 0xFF	; 255
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	f8 01       	movw	r30, r16
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	1f c0       	rjmp	.+62     	; 0x3466 <Door_Sequence+0x294>
    3428:	fe 01       	movw	r30, r28
    342a:	e7 5b       	subi	r30, 0xB7	; 183
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	88 ec       	ldi	r24, 0xC8	; 200
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
    3436:	fe 01       	movw	r30, r28
    3438:	e7 5b       	subi	r30, 0xB7	; 183
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	91 81       	ldd	r25, Z+1	; 0x01
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <Door_Sequence+0x26e>
    3444:	fe 01       	movw	r30, r28
    3446:	e7 5b       	subi	r30, 0xB7	; 183
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	de 01       	movw	r26, r28
    3450:	a5 5b       	subi	r26, 0xB5	; 181
    3452:	bf 4f       	sbci	r27, 0xFF	; 255
    3454:	fe 01       	movw	r30, r28
    3456:	e5 5b       	subi	r30, 0xB5	; 181
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	11 96       	adiw	r26, 0x01	; 1
    3462:	9c 93       	st	X, r25
    3464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3466:	fe 01       	movw	r30, r28
    3468:	e5 5b       	subi	r30, 0xB5	; 181
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	d1 f6       	brne	.-76     	; 0x3428 <Door_Sequence+0x256>
    3474:	27 c0       	rjmp	.+78     	; 0x34c4 <Door_Sequence+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3476:	8e 01       	movw	r16, r28
    3478:	05 5b       	subi	r16, 0xB5	; 181
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	fe 01       	movw	r30, r28
    347e:	e3 5b       	subi	r30, 0xB3	; 179
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	f8 01       	movw	r30, r16
    3494:	91 83       	std	Z+1, r25	; 0x01
    3496:	80 83       	st	Z, r24
    3498:	de 01       	movw	r26, r28
    349a:	a9 5b       	subi	r26, 0xB9	; 185
    349c:	bf 4f       	sbci	r27, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	e5 5b       	subi	r30, 0xB5	; 181
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	91 81       	ldd	r25, Z+1	; 0x01
    34a8:	8d 93       	st	X+, r24
    34aa:	9c 93       	st	X, r25
    34ac:	fe 01       	movw	r30, r28
    34ae:	e9 5b       	subi	r30, 0xB9	; 185
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <Door_Sequence+0x2e4>
    34ba:	fe 01       	movw	r30, r28
    34bc:	e9 5b       	subi	r30, 0xB9	; 185
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
    34c4:	fe 01       	movw	r30, r28
    34c6:	ed 5b       	subi	r30, 0xBD	; 189
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	aa ef       	ldi	r26, 0xFA	; 250
    34d0:	b4 e4       	ldi	r27, 0x44	; 68
    34d2:	80 83       	st	Z, r24
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	a2 83       	std	Z+2, r26	; 0x02
    34d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34da:	8e 01       	movw	r16, r28
    34dc:	01 5c       	subi	r16, 0xC1	; 193
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	fe 01       	movw	r30, r28
    34e2:	ed 5b       	subi	r30, 0xBD	; 189
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	60 81       	ld	r22, Z
    34e8:	71 81       	ldd	r23, Z+1	; 0x01
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	93 81       	ldd	r25, Z+3	; 0x03
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	f8 01       	movw	r30, r16
    3500:	80 83       	st	Z, r24
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	a2 83       	std	Z+2, r26	; 0x02
    3506:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3508:	fe 01       	movw	r30, r28
    350a:	ff 96       	adiw	r30, 0x3f	; 63
    350c:	60 81       	ld	r22, Z
    350e:	71 81       	ldd	r23, Z+1	; 0x01
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	93 81       	ldd	r25, Z+3	; 0x03
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <Door_Sequence+0x35c>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9e af       	std	Y+62, r25	; 0x3e
    352a:	8d af       	std	Y+61, r24	; 0x3d
    352c:	46 c0       	rjmp	.+140    	; 0x35ba <Door_Sequence+0x3e8>
	else if (__tmp > 65535)
    352e:	fe 01       	movw	r30, r28
    3530:	ff 96       	adiw	r30, 0x3f	; 63
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	64 f5       	brge	.+88     	; 0x35a2 <Door_Sequence+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	fe 01       	movw	r30, r28
    354c:	ed 5b       	subi	r30, 0xBD	; 189
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e2       	ldi	r20, 0x20	; 32
    355e:	51 e4       	ldi	r21, 0x41	; 65
    3560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9e af       	std	Y+62, r25	; 0x3e
    3576:	8d af       	std	Y+61, r24	; 0x3d
    3578:	0f c0       	rjmp	.+30     	; 0x3598 <Door_Sequence+0x3c6>
    357a:	88 ec       	ldi	r24, 0xC8	; 200
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9c af       	std	Y+60, r25	; 0x3c
    3580:	8b af       	std	Y+59, r24	; 0x3b
    3582:	8b ad       	ldd	r24, Y+59	; 0x3b
    3584:	9c ad       	ldd	r25, Y+60	; 0x3c
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <Door_Sequence+0x3b4>
    358a:	9c af       	std	Y+60, r25	; 0x3c
    358c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3590:	9e ad       	ldd	r25, Y+62	; 0x3e
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	9e af       	std	Y+62, r25	; 0x3e
    3596:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3598:	8d ad       	ldd	r24, Y+61	; 0x3d
    359a:	9e ad       	ldd	r25, Y+62	; 0x3e
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	69 f7       	brne	.-38     	; 0x357a <Door_Sequence+0x3a8>
    35a0:	16 c0       	rjmp	.+44     	; 0x35ce <Door_Sequence+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a2:	fe 01       	movw	r30, r28
    35a4:	ff 96       	adiw	r30, 0x3f	; 63
    35a6:	60 81       	ld	r22, Z
    35a8:	71 81       	ldd	r23, Z+1	; 0x01
    35aa:	82 81       	ldd	r24, Z+2	; 0x02
    35ac:	93 81       	ldd	r25, Z+3	; 0x03
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9e af       	std	Y+62, r25	; 0x3e
    35b8:	8d af       	std	Y+61, r24	; 0x3d
    35ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    35bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    35be:	9a af       	std	Y+58, r25	; 0x3a
    35c0:	89 af       	std	Y+57, r24	; 0x39
    35c2:	89 ad       	ldd	r24, Y+57	; 0x39
    35c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <Door_Sequence+0x3f4>
    35ca:	9a af       	std	Y+58, r25	; 0x3a
    35cc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(6000);
	_delay_ms(6000);
	_delay_ms(2000);
	LCD_clearScreen();
    35ce:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
	LCD_displayString("Stop motor");
    35d2:	8a ed       	ldi	r24, 0xDA	; 218
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCD_displayString>
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e8       	ldi	r25, 0x80	; 128
    35de:	ab e3       	ldi	r26, 0x3B	; 59
    35e0:	b5 e4       	ldi	r27, 0x45	; 69
    35e2:	8d ab       	std	Y+53, r24	; 0x35
    35e4:	9e ab       	std	Y+54, r25	; 0x36
    35e6:	af ab       	std	Y+55, r26	; 0x37
    35e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ea:	6d a9       	ldd	r22, Y+53	; 0x35
    35ec:	7e a9       	ldd	r23, Y+54	; 0x36
    35ee:	8f a9       	ldd	r24, Y+55	; 0x37
    35f0:	98 ad       	ldd	r25, Y+56	; 0x38
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a ef       	ldi	r20, 0xFA	; 250
    35f8:	54 e4       	ldi	r21, 0x44	; 68
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	89 ab       	std	Y+49, r24	; 0x31
    3604:	9a ab       	std	Y+50, r25	; 0x32
    3606:	ab ab       	std	Y+51, r26	; 0x33
    3608:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    360a:	69 a9       	ldd	r22, Y+49	; 0x31
    360c:	7a a9       	ldd	r23, Y+50	; 0x32
    360e:	8b a9       	ldd	r24, Y+51	; 0x33
    3610:	9c a9       	ldd	r25, Y+52	; 0x34
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	40 e8       	ldi	r20, 0x80	; 128
    3618:	5f e3       	ldi	r21, 0x3F	; 63
    361a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    361e:	88 23       	and	r24, r24
    3620:	2c f4       	brge	.+10     	; 0x362c <Door_Sequence+0x45a>
		__ticks = 1;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	98 ab       	std	Y+48, r25	; 0x30
    3628:	8f a7       	std	Y+47, r24	; 0x2f
    362a:	3f c0       	rjmp	.+126    	; 0x36aa <Door_Sequence+0x4d8>
	else if (__tmp > 65535)
    362c:	69 a9       	ldd	r22, Y+49	; 0x31
    362e:	7a a9       	ldd	r23, Y+50	; 0x32
    3630:	8b a9       	ldd	r24, Y+51	; 0x33
    3632:	9c a9       	ldd	r25, Y+52	; 0x34
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	3f ef       	ldi	r19, 0xFF	; 255
    3638:	4f e7       	ldi	r20, 0x7F	; 127
    363a:	57 e4       	ldi	r21, 0x47	; 71
    363c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3640:	18 16       	cp	r1, r24
    3642:	4c f5       	brge	.+82     	; 0x3696 <Door_Sequence+0x4c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	6d a9       	ldd	r22, Y+53	; 0x35
    3646:	7e a9       	ldd	r23, Y+54	; 0x36
    3648:	8f a9       	ldd	r24, Y+55	; 0x37
    364a:	98 ad       	ldd	r25, Y+56	; 0x38
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	51 e4       	ldi	r21, 0x41	; 65
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	bc 01       	movw	r22, r24
    365e:	cd 01       	movw	r24, r26
    3660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	98 ab       	std	Y+48, r25	; 0x30
    366a:	8f a7       	std	Y+47, r24	; 0x2f
    366c:	0f c0       	rjmp	.+30     	; 0x368c <Door_Sequence+0x4ba>
    366e:	88 ec       	ldi	r24, 0xC8	; 200
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9e a7       	std	Y+46, r25	; 0x2e
    3674:	8d a7       	std	Y+45, r24	; 0x2d
    3676:	8d a5       	ldd	r24, Y+45	; 0x2d
    3678:	9e a5       	ldd	r25, Y+46	; 0x2e
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <Door_Sequence+0x4a8>
    367e:	9e a7       	std	Y+46, r25	; 0x2e
    3680:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3682:	8f a5       	ldd	r24, Y+47	; 0x2f
    3684:	98 a9       	ldd	r25, Y+48	; 0x30
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	98 ab       	std	Y+48, r25	; 0x30
    368a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368c:	8f a5       	ldd	r24, Y+47	; 0x2f
    368e:	98 a9       	ldd	r25, Y+48	; 0x30
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	69 f7       	brne	.-38     	; 0x366e <Door_Sequence+0x49c>
    3694:	14 c0       	rjmp	.+40     	; 0x36be <Door_Sequence+0x4ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3696:	69 a9       	ldd	r22, Y+49	; 0x31
    3698:	7a a9       	ldd	r23, Y+50	; 0x32
    369a:	8b a9       	ldd	r24, Y+51	; 0x33
    369c:	9c a9       	ldd	r25, Y+52	; 0x34
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	98 ab       	std	Y+48, r25	; 0x30
    36a8:	8f a7       	std	Y+47, r24	; 0x2f
    36aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ac:	98 a9       	ldd	r25, Y+48	; 0x30
    36ae:	9c a7       	std	Y+44, r25	; 0x2c
    36b0:	8b a7       	std	Y+43, r24	; 0x2b
    36b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	f1 f7       	brne	.-4      	; 0x36b6 <Door_Sequence+0x4e4>
    36ba:	9c a7       	std	Y+44, r25	; 0x2c
    36bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(3000);
	LCD_clearScreen();
    36be:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
	LCD_displayString("Door is locking");
    36c2:	85 ee       	ldi	r24, 0xE5	; 229
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <LCD_displayString>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e8       	ldi	r25, 0x80	; 128
    36ce:	ab eb       	ldi	r26, 0xBB	; 187
    36d0:	b5 e4       	ldi	r27, 0x45	; 69
    36d2:	8f a3       	std	Y+39, r24	; 0x27
    36d4:	98 a7       	std	Y+40, r25	; 0x28
    36d6:	a9 a7       	std	Y+41, r26	; 0x29
    36d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6f a1       	ldd	r22, Y+39	; 0x27
    36dc:	78 a5       	ldd	r23, Y+40	; 0x28
    36de:	89 a5       	ldd	r24, Y+41	; 0x29
    36e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8b a3       	std	Y+35, r24	; 0x23
    36f4:	9c a3       	std	Y+36, r25	; 0x24
    36f6:	ad a3       	std	Y+37, r26	; 0x25
    36f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36fa:	6b a1       	ldd	r22, Y+35	; 0x23
    36fc:	7c a1       	ldd	r23, Y+36	; 0x24
    36fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3700:	9e a1       	ldd	r25, Y+38	; 0x26
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <Door_Sequence+0x54a>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9a a3       	std	Y+34, r25	; 0x22
    3718:	89 a3       	std	Y+33, r24	; 0x21
    371a:	3f c0       	rjmp	.+126    	; 0x379a <Door_Sequence+0x5c8>
	else if (__tmp > 65535)
    371c:	6b a1       	ldd	r22, Y+35	; 0x23
    371e:	7c a1       	ldd	r23, Y+36	; 0x24
    3720:	8d a1       	ldd	r24, Y+37	; 0x25
    3722:	9e a1       	ldd	r25, Y+38	; 0x26
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <Door_Sequence+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6f a1       	ldd	r22, Y+39	; 0x27
    3736:	78 a5       	ldd	r23, Y+40	; 0x28
    3738:	89 a5       	ldd	r24, Y+41	; 0x29
    373a:	9a a5       	ldd	r25, Y+42	; 0x2a
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9a a3       	std	Y+34, r25	; 0x22
    375a:	89 a3       	std	Y+33, r24	; 0x21
    375c:	0f c0       	rjmp	.+30     	; 0x377c <Door_Sequence+0x5aa>
    375e:	88 ec       	ldi	r24, 0xC8	; 200
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	98 a3       	std	Y+32, r25	; 0x20
    3764:	8f 8f       	std	Y+31, r24	; 0x1f
    3766:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3768:	98 a1       	ldd	r25, Y+32	; 0x20
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <Door_Sequence+0x598>
    376e:	98 a3       	std	Y+32, r25	; 0x20
    3770:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	89 a1       	ldd	r24, Y+33	; 0x21
    3774:	9a a1       	ldd	r25, Y+34	; 0x22
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	9a a3       	std	Y+34, r25	; 0x22
    377a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	89 a1       	ldd	r24, Y+33	; 0x21
    377e:	9a a1       	ldd	r25, Y+34	; 0x22
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <Door_Sequence+0x58c>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <Door_Sequence+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	6b a1       	ldd	r22, Y+35	; 0x23
    3788:	7c a1       	ldd	r23, Y+36	; 0x24
    378a:	8d a1       	ldd	r24, Y+37	; 0x25
    378c:	9e a1       	ldd	r25, Y+38	; 0x26
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9a a3       	std	Y+34, r25	; 0x22
    3798:	89 a3       	std	Y+33, r24	; 0x21
    379a:	89 a1       	ldd	r24, Y+33	; 0x21
    379c:	9a a1       	ldd	r25, Y+34	; 0x22
    379e:	9e 8f       	std	Y+30, r25	; 0x1e
    37a0:	8d 8f       	std	Y+29, r24	; 0x1d
    37a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <Door_Sequence+0x5d4>
    37aa:	9e 8f       	std	Y+30, r25	; 0x1e
    37ac:	8d 8f       	std	Y+29, r24	; 0x1d
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e8       	ldi	r25, 0x80	; 128
    37b2:	ab eb       	ldi	r26, 0xBB	; 187
    37b4:	b5 e4       	ldi	r27, 0x45	; 69
    37b6:	89 8f       	std	Y+25, r24	; 0x19
    37b8:	9a 8f       	std	Y+26, r25	; 0x1a
    37ba:	ab 8f       	std	Y+27, r26	; 0x1b
    37bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	69 8d       	ldd	r22, Y+25	; 0x19
    37c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a ef       	ldi	r20, 0xFA	; 250
    37cc:	54 e4       	ldi	r21, 0x44	; 68
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8d 8b       	std	Y+21, r24	; 0x15
    37d8:	9e 8b       	std	Y+22, r25	; 0x16
    37da:	af 8b       	std	Y+23, r26	; 0x17
    37dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37de:	6d 89       	ldd	r22, Y+21	; 0x15
    37e0:	7e 89       	ldd	r23, Y+22	; 0x16
    37e2:	8f 89       	ldd	r24, Y+23	; 0x17
    37e4:	98 8d       	ldd	r25, Y+24	; 0x18
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37f2:	88 23       	and	r24, r24
    37f4:	2c f4       	brge	.+10     	; 0x3800 <Door_Sequence+0x62e>
		__ticks = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9c 8b       	std	Y+20, r25	; 0x14
    37fc:	8b 8b       	std	Y+19, r24	; 0x13
    37fe:	3f c0       	rjmp	.+126    	; 0x387e <Door_Sequence+0x6ac>
	else if (__tmp > 65535)
    3800:	6d 89       	ldd	r22, Y+21	; 0x15
    3802:	7e 89       	ldd	r23, Y+22	; 0x16
    3804:	8f 89       	ldd	r24, Y+23	; 0x17
    3806:	98 8d       	ldd	r25, Y+24	; 0x18
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	57 e4       	ldi	r21, 0x47	; 71
    3810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	4c f5       	brge	.+82     	; 0x386a <Door_Sequence+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3818:	69 8d       	ldd	r22, Y+25	; 0x19
    381a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    381c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    381e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	9c 8b       	std	Y+20, r25	; 0x14
    383e:	8b 8b       	std	Y+19, r24	; 0x13
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <Door_Sequence+0x68e>
    3842:	88 ec       	ldi	r24, 0xC8	; 200
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9a 8b       	std	Y+18, r25	; 0x12
    3848:	89 8b       	std	Y+17, r24	; 0x11
    384a:	89 89       	ldd	r24, Y+17	; 0x11
    384c:	9a 89       	ldd	r25, Y+18	; 0x12
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <Door_Sequence+0x67c>
    3852:	9a 8b       	std	Y+18, r25	; 0x12
    3854:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	8b 89       	ldd	r24, Y+19	; 0x13
    3858:	9c 89       	ldd	r25, Y+20	; 0x14
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	9c 8b       	std	Y+20, r25	; 0x14
    385e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	8b 89       	ldd	r24, Y+19	; 0x13
    3862:	9c 89       	ldd	r25, Y+20	; 0x14
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f7       	brne	.-38     	; 0x3842 <Door_Sequence+0x670>
    3868:	14 c0       	rjmp	.+40     	; 0x3892 <Door_Sequence+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	6d 89       	ldd	r22, Y+21	; 0x15
    386c:	7e 89       	ldd	r23, Y+22	; 0x16
    386e:	8f 89       	ldd	r24, Y+23	; 0x17
    3870:	98 8d       	ldd	r25, Y+24	; 0x18
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	9c 8b       	std	Y+20, r25	; 0x14
    387c:	8b 8b       	std	Y+19, r24	; 0x13
    387e:	8b 89       	ldd	r24, Y+19	; 0x13
    3880:	9c 89       	ldd	r25, Y+20	; 0x14
    3882:	98 8b       	std	Y+16, r25	; 0x10
    3884:	8f 87       	std	Y+15, r24	; 0x0f
    3886:	8f 85       	ldd	r24, Y+15	; 0x0f
    3888:	98 89       	ldd	r25, Y+16	; 0x10
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <Door_Sequence+0x6b8>
    388e:	98 8b       	std	Y+16, r25	; 0x10
    3890:	8f 87       	std	Y+15, r24	; 0x0f
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	aa ef       	ldi	r26, 0xFA	; 250
    3898:	b4 e4       	ldi	r27, 0x44	; 68
    389a:	8b 87       	std	Y+11, r24	; 0x0b
    389c:	9c 87       	std	Y+12, r25	; 0x0c
    389e:	ad 87       	std	Y+13, r26	; 0x0d
    38a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	4a ef       	ldi	r20, 0xFA	; 250
    38b0:	54 e4       	ldi	r21, 0x44	; 68
    38b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	8f 83       	std	Y+7, r24	; 0x07
    38bc:	98 87       	std	Y+8, r25	; 0x08
    38be:	a9 87       	std	Y+9, r26	; 0x09
    38c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38c2:	6f 81       	ldd	r22, Y+7	; 0x07
    38c4:	78 85       	ldd	r23, Y+8	; 0x08
    38c6:	89 85       	ldd	r24, Y+9	; 0x09
    38c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	2c f4       	brge	.+10     	; 0x38e4 <Door_Sequence+0x712>
		__ticks = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9e 83       	std	Y+6, r25	; 0x06
    38e0:	8d 83       	std	Y+5, r24	; 0x05
    38e2:	3f c0       	rjmp	.+126    	; 0x3962 <Door_Sequence+0x790>
	else if (__tmp > 65535)
    38e4:	6f 81       	ldd	r22, Y+7	; 0x07
    38e6:	78 85       	ldd	r23, Y+8	; 0x08
    38e8:	89 85       	ldd	r24, Y+9	; 0x09
    38ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	3f ef       	ldi	r19, 0xFF	; 255
    38f0:	4f e7       	ldi	r20, 0x7F	; 127
    38f2:	57 e4       	ldi	r21, 0x47	; 71
    38f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f8:	18 16       	cp	r1, r24
    38fa:	4c f5       	brge	.+82     	; 0x394e <Door_Sequence+0x77c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    38fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3900:	8d 85       	ldd	r24, Y+13	; 0x0d
    3902:	9e 85       	ldd	r25, Y+14	; 0x0e
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	40 e2       	ldi	r20, 0x20	; 32
    390a:	51 e4       	ldi	r21, 0x41	; 65
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9e 83       	std	Y+6, r25	; 0x06
    3922:	8d 83       	std	Y+5, r24	; 0x05
    3924:	0f c0       	rjmp	.+30     	; 0x3944 <Door_Sequence+0x772>
    3926:	88 ec       	ldi	r24, 0xC8	; 200
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	9c 83       	std	Y+4, r25	; 0x04
    392c:	8b 83       	std	Y+3, r24	; 0x03
    392e:	8b 81       	ldd	r24, Y+3	; 0x03
    3930:	9c 81       	ldd	r25, Y+4	; 0x04
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	f1 f7       	brne	.-4      	; 0x3932 <Door_Sequence+0x760>
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	9e 83       	std	Y+6, r25	; 0x06
    3942:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3944:	8d 81       	ldd	r24, Y+5	; 0x05
    3946:	9e 81       	ldd	r25, Y+6	; 0x06
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	69 f7       	brne	.-38     	; 0x3926 <Door_Sequence+0x754>
    394c:	14 c0       	rjmp	.+40     	; 0x3976 <Door_Sequence+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394e:	6f 81       	ldd	r22, Y+7	; 0x07
    3950:	78 85       	ldd	r23, Y+8	; 0x08
    3952:	89 85       	ldd	r24, Y+9	; 0x09
    3954:	9a 85       	ldd	r25, Y+10	; 0x0a
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9e 83       	std	Y+6, r25	; 0x06
    3960:	8d 83       	std	Y+5, r24	; 0x05
    3962:	8d 81       	ldd	r24, Y+5	; 0x05
    3964:	9e 81       	ldd	r25, Y+6	; 0x06
    3966:	9a 83       	std	Y+2, r25	; 0x02
    3968:	89 83       	std	Y+1, r24	; 0x01
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <Door_Sequence+0x79c>
    3972:	9a 83       	std	Y+2, r25	; 0x02
    3974:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(6000);
	_delay_ms(6000);
	_delay_ms(2000);
}
    3976:	ce 59       	subi	r28, 0x9E	; 158
    3978:	df 4f       	sbci	r29, 0xFF	; 255
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	08 95       	ret

0000398e <UART_Configurations>:


void UART_Configurations(void){
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	2c 97       	sbiw	r28, 0x0c	; 12
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType ptr_uart_init = { Bits_Data_8, disabled, Bits_Stop_1,
			RATE_9600 };
    39a2:	ce 01       	movw	r24, r28
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	99 87       	std	Y+9, r25	; 0x09
    39a8:	88 87       	std	Y+8, r24	; 0x08
    39aa:	e1 e3       	ldi	r30, 0x31	; 49
    39ac:	f1 e0       	ldi	r31, 0x01	; 1
    39ae:	fb 87       	std	Y+11, r31	; 0x0b
    39b0:	ea 87       	std	Y+10, r30	; 0x0a
    39b2:	f7 e0       	ldi	r31, 0x07	; 7
    39b4:	fc 87       	std	Y+12, r31	; 0x0c
    39b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    39b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    39ba:	00 80       	ld	r0, Z
    39bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    39be:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c0:	01 96       	adiw	r24, 0x01	; 1
    39c2:	9b 87       	std	Y+11, r25	; 0x0b
    39c4:	8a 87       	std	Y+10, r24	; 0x0a
    39c6:	e8 85       	ldd	r30, Y+8	; 0x08
    39c8:	f9 85       	ldd	r31, Y+9	; 0x09
    39ca:	00 82       	st	Z, r0
    39cc:	88 85       	ldd	r24, Y+8	; 0x08
    39ce:	99 85       	ldd	r25, Y+9	; 0x09
    39d0:	01 96       	adiw	r24, 0x01	; 1
    39d2:	99 87       	std	Y+9, r25	; 0x09
    39d4:	88 87       	std	Y+8, r24	; 0x08
    39d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    39d8:	91 50       	subi	r25, 0x01	; 1
    39da:	9c 87       	std	Y+12, r25	; 0x0c
    39dc:	ec 85       	ldd	r30, Y+12	; 0x0c
    39de:	ee 23       	and	r30, r30
    39e0:	51 f7       	brne	.-44     	; 0x39b6 <UART_Configurations+0x28>
	UART_init(&ptr_uart_init);
    39e2:	ce 01       	movw	r24, r28
    39e4:	01 96       	adiw	r24, 0x01	; 1
    39e6:	0e 94 c6 09 	call	0x138c	; 0x138c <UART_init>
}
    39ea:	2c 96       	adiw	r28, 0x0c	; 12
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	08 95       	ret

000039fc <Polling_one_minute>:

//fy approach tany andaf mn al polling al t3ban da
//momken ne3melo be timer0 aw timer2
// bas msh mestahla bsra7a :D
void Polling_one_minute(void){
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	2f 97       	sbiw	r28, 0x0f	; 15
    3a06:	0f b6       	in	r0, 0x3f	; 63
    3a08:	f8 94       	cli
    3a0a:	de bf       	out	0x3e, r29	; 62
    3a0c:	0f be       	out	0x3f, r0	; 63
    3a0e:	cd bf       	out	0x3d, r28	; 61
	for (uint8 i = 0; i < 10; i++) {
    3a10:	1f 86       	std	Y+15, r1	; 0x0f
    3a12:	75 c0       	rjmp	.+234    	; 0x3afe <Polling_one_minute+0x102>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e8       	ldi	r25, 0x80	; 128
    3a18:	ab eb       	ldi	r26, 0xBB	; 187
    3a1a:	b5 e4       	ldi	r27, 0x45	; 69
    3a1c:	8b 87       	std	Y+11, r24	; 0x0b
    3a1e:	9c 87       	std	Y+12, r25	; 0x0c
    3a20:	ad 87       	std	Y+13, r26	; 0x0d
    3a22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	4a ef       	ldi	r20, 0xFA	; 250
    3a32:	54 e4       	ldi	r21, 0x44	; 68
    3a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	8f 83       	std	Y+7, r24	; 0x07
    3a3e:	98 87       	std	Y+8, r25	; 0x08
    3a40:	a9 87       	std	Y+9, r26	; 0x09
    3a42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a44:	6f 81       	ldd	r22, Y+7	; 0x07
    3a46:	78 85       	ldd	r23, Y+8	; 0x08
    3a48:	89 85       	ldd	r24, Y+9	; 0x09
    3a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e8       	ldi	r20, 0x80	; 128
    3a52:	5f e3       	ldi	r21, 0x3F	; 63
    3a54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a58:	88 23       	and	r24, r24
    3a5a:	2c f4       	brge	.+10     	; 0x3a66 <Polling_one_minute+0x6a>
		__ticks = 1;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	9e 83       	std	Y+6, r25	; 0x06
    3a62:	8d 83       	std	Y+5, r24	; 0x05
    3a64:	3f c0       	rjmp	.+126    	; 0x3ae4 <Polling_one_minute+0xe8>
	else if (__tmp > 65535)
    3a66:	6f 81       	ldd	r22, Y+7	; 0x07
    3a68:	78 85       	ldd	r23, Y+8	; 0x08
    3a6a:	89 85       	ldd	r24, Y+9	; 0x09
    3a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	3f ef       	ldi	r19, 0xFF	; 255
    3a72:	4f e7       	ldi	r20, 0x7F	; 127
    3a74:	57 e4       	ldi	r21, 0x47	; 71
    3a76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a7a:	18 16       	cp	r1, r24
    3a7c:	4c f5       	brge	.+82     	; 0x3ad0 <Polling_one_minute+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	40 e2       	ldi	r20, 0x20	; 32
    3a8c:	51 e4       	ldi	r21, 0x41	; 65
    3a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	8d 83       	std	Y+5, r24	; 0x05
    3aa6:	0f c0       	rjmp	.+30     	; 0x3ac6 <Polling_one_minute+0xca>
    3aa8:	88 ec       	ldi	r24, 0xC8	; 200
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	8b 83       	std	Y+3, r24	; 0x03
    3ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <Polling_one_minute+0xb8>
    3ab8:	9c 83       	std	Y+4, r25	; 0x04
    3aba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	9e 83       	std	Y+6, r25	; 0x06
    3ac4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	69 f7       	brne	.-38     	; 0x3aa8 <Polling_one_minute+0xac>
    3ace:	14 c0       	rjmp	.+40     	; 0x3af8 <Polling_one_minute+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad2:	78 85       	ldd	r23, Y+8	; 0x08
    3ad4:	89 85       	ldd	r24, Y+9	; 0x09
    3ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	9e 83       	std	Y+6, r25	; 0x06
    3ae2:	8d 83       	std	Y+5, r24	; 0x05
    3ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	f1 f7       	brne	.-4      	; 0x3af0 <Polling_one_minute+0xf4>
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3afa:	8f 5f       	subi	r24, 0xFF	; 255
    3afc:	8f 87       	std	Y+15, r24	; 0x0f
    3afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b00:	8a 30       	cpi	r24, 0x0A	; 10
    3b02:	08 f4       	brcc	.+2      	; 0x3b06 <Polling_one_minute+0x10a>
    3b04:	87 cf       	rjmp	.-242    	; 0x3a14 <Polling_one_minute+0x18>
		_delay_ms(6000);
	}
}
    3b06:	2f 96       	adiw	r28, 0x0f	; 15
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <main>:

extern uint8 key;
extern uint8 PassChecking;


int main(void) {
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62

	UART_Configurations();
    3b20:	0e 94 c7 1c 	call	0x398e	; 0x398e <UART_Configurations>

	LCD_init();
    3b24:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_init>

	EnterPass();
    3b28:	0e 94 c3 18 	call	0x3186	; 0x3186 <EnterPass>

	while (1) {

		LCD_clearScreen();
    3b2c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    3b30:	25 ef       	ldi	r18, 0xF5	; 245
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	60 e0       	ldi	r22, 0x00	; 0
    3b38:	a9 01       	movw	r20, r18
    3b3a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    3b3e:	23 e0       	ldi	r18, 0x03	; 3
    3b40:	31 e0       	ldi	r19, 0x01	; 1
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	60 e0       	ldi	r22, 0x00	; 0
    3b46:	a9 01       	movw	r20, r18
    3b48:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
    3b4c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <KEYPAD_getPressedKey>
    3b50:	80 93 46 01 	sts	0x0146, r24
		LCD_clearScreen();
    3b54:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
		SendKey();
    3b58:	0e 94 de 18 	call	0x31bc	; 0x31bc <SendKey>

		if (key == '+') {
    3b5c:	80 91 46 01 	lds	r24, 0x0146
    3b60:	8b 32       	cpi	r24, 0x2B	; 43
    3b62:	f1 f4       	brne	.+60     	; 0x3ba0 <main+0x88>
			LCD_displayStringRowColumn(0, 0, "pass to cont:");
    3b64:	23 e1       	ldi	r18, 0x13	; 19
    3b66:	31 e0       	ldi	r19, 0x01	; 1
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
			Password_adjust(pass);
    3b7a:	8c e3       	ldi	r24, 0x3C	; 60
    3b7c:	91 e0       	ldi	r25, 0x01	; 1
    3b7e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
			SendPass(pass);
    3b82:	8c e3       	ldi	r24, 0x3C	; 60
    3b84:	91 e0       	ldi	r25, 0x01	; 1
    3b86:	0e 94 3c 18 	call	0x3078	; 0x3078 <SendPass>
			PassChecking = UART_recieveByte();
    3b8a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    3b8e:	80 93 2a 01 	sts	0x012A, r24
			LCD_clearScreen();
    3b92:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
			PassWrong_case(Door_Sequence);
    3b96:	89 ee       	ldi	r24, 0xE9	; 233
    3b98:	98 e1       	ldi	r25, 0x18	; 24
    3b9a:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <PassWrong_case>
    3b9e:	c6 cf       	rjmp	.-116    	; 0x3b2c <main+0x14>

		} else if (key == '-') {
    3ba0:	80 91 46 01 	lds	r24, 0x0146
    3ba4:	8d 32       	cpi	r24, 0x2D	; 45
    3ba6:	11 f6       	brne	.-124    	; 0x3b2c <main+0x14>
			LCD_displayStringRowColumn(0, 0, "pass to cont:");
    3ba8:	23 e1       	ldi	r18, 0x13	; 19
    3baa:	31 e0       	ldi	r19, 0x01	; 1
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	a9 01       	movw	r20, r18
    3bb2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <LCD_moveCursor>
			Password_adjust(pass);
    3bbe:	8c e3       	ldi	r24, 0x3C	; 60
    3bc0:	91 e0       	ldi	r25, 0x01	; 1
    3bc2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <Password_adjust>
			SendPass(pass);
    3bc6:	8c e3       	ldi	r24, 0x3C	; 60
    3bc8:	91 e0       	ldi	r25, 0x01	; 1
    3bca:	0e 94 3c 18 	call	0x3078	; 0x3078 <SendPass>
			PassChecking = UART_recieveByte();
    3bce:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <UART_recieveByte>
    3bd2:	80 93 2a 01 	sts	0x012A, r24
			LCD_clearScreen();
    3bd6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <LCD_clearScreen>
			PassWrong_case(EnterPass);
    3bda:	83 ec       	ldi	r24, 0xC3	; 195
    3bdc:	98 e1       	ldi	r25, 0x18	; 24
    3bde:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <PassWrong_case>
    3be2:	a4 cf       	rjmp	.-184    	; 0x3b2c <main+0x14>

00003be4 <__udivmodsi4>:
    3be4:	a1 e2       	ldi	r26, 0x21	; 33
    3be6:	1a 2e       	mov	r1, r26
    3be8:	aa 1b       	sub	r26, r26
    3bea:	bb 1b       	sub	r27, r27
    3bec:	fd 01       	movw	r30, r26
    3bee:	0d c0       	rjmp	.+26     	; 0x3c0a <__udivmodsi4_ep>

00003bf0 <__udivmodsi4_loop>:
    3bf0:	aa 1f       	adc	r26, r26
    3bf2:	bb 1f       	adc	r27, r27
    3bf4:	ee 1f       	adc	r30, r30
    3bf6:	ff 1f       	adc	r31, r31
    3bf8:	a2 17       	cp	r26, r18
    3bfa:	b3 07       	cpc	r27, r19
    3bfc:	e4 07       	cpc	r30, r20
    3bfe:	f5 07       	cpc	r31, r21
    3c00:	20 f0       	brcs	.+8      	; 0x3c0a <__udivmodsi4_ep>
    3c02:	a2 1b       	sub	r26, r18
    3c04:	b3 0b       	sbc	r27, r19
    3c06:	e4 0b       	sbc	r30, r20
    3c08:	f5 0b       	sbc	r31, r21

00003c0a <__udivmodsi4_ep>:
    3c0a:	66 1f       	adc	r22, r22
    3c0c:	77 1f       	adc	r23, r23
    3c0e:	88 1f       	adc	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	1a 94       	dec	r1
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <__udivmodsi4_loop>
    3c16:	60 95       	com	r22
    3c18:	70 95       	com	r23
    3c1a:	80 95       	com	r24
    3c1c:	90 95       	com	r25
    3c1e:	9b 01       	movw	r18, r22
    3c20:	ac 01       	movw	r20, r24
    3c22:	bd 01       	movw	r22, r26
    3c24:	cf 01       	movw	r24, r30
    3c26:	08 95       	ret

00003c28 <__prologue_saves__>:
    3c28:	2f 92       	push	r2
    3c2a:	3f 92       	push	r3
    3c2c:	4f 92       	push	r4
    3c2e:	5f 92       	push	r5
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
    3c46:	1f 93       	push	r17
    3c48:	cf 93       	push	r28
    3c4a:	df 93       	push	r29
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	ca 1b       	sub	r28, r26
    3c52:	db 0b       	sbc	r29, r27
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	de bf       	out	0x3e, r29	; 62
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	cd bf       	out	0x3d, r28	; 61
    3c5e:	09 94       	ijmp

00003c60 <__epilogue_restores__>:
    3c60:	2a 88       	ldd	r2, Y+18	; 0x12
    3c62:	39 88       	ldd	r3, Y+17	; 0x11
    3c64:	48 88       	ldd	r4, Y+16	; 0x10
    3c66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c72:	b9 84       	ldd	r11, Y+9	; 0x09
    3c74:	c8 84       	ldd	r12, Y+8	; 0x08
    3c76:	df 80       	ldd	r13, Y+7	; 0x07
    3c78:	ee 80       	ldd	r14, Y+6	; 0x06
    3c7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c80:	aa 81       	ldd	r26, Y+2	; 0x02
    3c82:	b9 81       	ldd	r27, Y+1	; 0x01
    3c84:	ce 0f       	add	r28, r30
    3c86:	d1 1d       	adc	r29, r1
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	ed 01       	movw	r28, r26
    3c94:	08 95       	ret

00003c96 <itoa>:
    3c96:	fb 01       	movw	r30, r22
    3c98:	9f 01       	movw	r18, r30
    3c9a:	e8 94       	clt
    3c9c:	42 30       	cpi	r20, 0x02	; 2
    3c9e:	c4 f0       	brlt	.+48     	; 0x3cd0 <itoa+0x3a>
    3ca0:	45 32       	cpi	r20, 0x25	; 37
    3ca2:	b4 f4       	brge	.+44     	; 0x3cd0 <itoa+0x3a>
    3ca4:	4a 30       	cpi	r20, 0x0A	; 10
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <itoa+0x1c>
    3ca8:	97 fb       	bst	r25, 7
    3caa:	1e f4       	brtc	.+6      	; 0x3cb2 <itoa+0x1c>
    3cac:	90 95       	com	r25
    3cae:	81 95       	neg	r24
    3cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb2:	64 2f       	mov	r22, r20
    3cb4:	77 27       	eor	r23, r23
    3cb6:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <__udivmodhi4>
    3cba:	80 5d       	subi	r24, 0xD0	; 208
    3cbc:	8a 33       	cpi	r24, 0x3A	; 58
    3cbe:	0c f0       	brlt	.+2      	; 0x3cc2 <itoa+0x2c>
    3cc0:	89 5d       	subi	r24, 0xD9	; 217
    3cc2:	81 93       	st	Z+, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	a1 f7       	brne	.-24     	; 0x3cb2 <itoa+0x1c>
    3cca:	16 f4       	brtc	.+4      	; 0x3cd0 <itoa+0x3a>
    3ccc:	5d e2       	ldi	r21, 0x2D	; 45
    3cce:	51 93       	st	Z+, r21
    3cd0:	10 82       	st	Z, r1
    3cd2:	c9 01       	movw	r24, r18
    3cd4:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <strrev>

00003cd8 <strrev>:
    3cd8:	dc 01       	movw	r26, r24
    3cda:	fc 01       	movw	r30, r24
    3cdc:	67 2f       	mov	r22, r23
    3cde:	71 91       	ld	r23, Z+
    3ce0:	77 23       	and	r23, r23
    3ce2:	e1 f7       	brne	.-8      	; 0x3cdc <strrev+0x4>
    3ce4:	32 97       	sbiw	r30, 0x02	; 2
    3ce6:	04 c0       	rjmp	.+8      	; 0x3cf0 <strrev+0x18>
    3ce8:	7c 91       	ld	r23, X
    3cea:	6d 93       	st	X+, r22
    3cec:	70 83       	st	Z, r23
    3cee:	62 91       	ld	r22, -Z
    3cf0:	ae 17       	cp	r26, r30
    3cf2:	bf 07       	cpc	r27, r31
    3cf4:	c8 f3       	brcs	.-14     	; 0x3ce8 <strrev+0x10>
    3cf6:	08 95       	ret

00003cf8 <__udivmodhi4>:
    3cf8:	aa 1b       	sub	r26, r26
    3cfa:	bb 1b       	sub	r27, r27
    3cfc:	51 e1       	ldi	r21, 0x11	; 17
    3cfe:	07 c0       	rjmp	.+14     	; 0x3d0e <__udivmodhi4_ep>

00003d00 <__udivmodhi4_loop>:
    3d00:	aa 1f       	adc	r26, r26
    3d02:	bb 1f       	adc	r27, r27
    3d04:	a6 17       	cp	r26, r22
    3d06:	b7 07       	cpc	r27, r23
    3d08:	10 f0       	brcs	.+4      	; 0x3d0e <__udivmodhi4_ep>
    3d0a:	a6 1b       	sub	r26, r22
    3d0c:	b7 0b       	sbc	r27, r23

00003d0e <__udivmodhi4_ep>:
    3d0e:	88 1f       	adc	r24, r24
    3d10:	99 1f       	adc	r25, r25
    3d12:	5a 95       	dec	r21
    3d14:	a9 f7       	brne	.-22     	; 0x3d00 <__udivmodhi4_loop>
    3d16:	80 95       	com	r24
    3d18:	90 95       	com	r25
    3d1a:	bc 01       	movw	r22, r24
    3d1c:	cd 01       	movw	r24, r26
    3d1e:	08 95       	ret

00003d20 <_exit>:
    3d20:	f8 94       	cli

00003d22 <__stop_program>:
    3d22:	ff cf       	rjmp	.-2      	; 0x3d22 <__stop_program>
